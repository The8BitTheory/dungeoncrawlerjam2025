#RetroDevStudio.MetaData.BASIC:7169,BASIC V7.0 VDC,uppercase,10,10
#####
# TODO
# - AFTER LOSE, ASK TO PLAY AGAIN OR NOT (GO TO MAIN MENU THEN)
# - SUPPORT MULTIPLE MAPS
# - USE BOTTOM GREY AREA FOR MESSAGES OUTSIDE OF GAMEPLAY
#   - CLEAR AFTER LEAVING DUNGEON
#   - MESSAGES "PRESS KEY"
# - HIGHSCORES: ALLOW SPACE
# - GAMEPLAY: SPACE PASSES ONE STEP AND INCREASES STEP COUNT


######
# DONE
# - COMBAT
# - MONSTER MOVEMENT
# - GHOST SPRITES (AT LEAST 1)
# - GHOSTS SPRITE FACE CORRECT DIRECTION
# - TEXT DISPLAY ON BOTTOM FOR BATTLE
# - CREDITS
# - DRAW MORE GHOST POSITIONS (SIMILAR TO COIN POSITIONS)
# - DRAW MORE COIN POSITIONS (ALSO SMALLER IN DISTANCE)
# - IN-GAME OPTIONS FOR RESTART MAP AND EXIT MAP
# - LABELLING EXIT
# - KEY MAPPING
# - HIGHSCORE (STEPS TAKEN)
# - AFTER WIN, GO TO HIGHSCORE ENTRY AND THEN MAIN MENU
# - CLEAR KEYBOARD BUFFER WHERE IT MAKES SENSE
#   - IN-GAME: MAP, MENU


0 REM ** FI G,X,Y,Z

# CHECK IF RUNNING A BLITZ! COMPILED VERSION.IF SO, DON'T PROMPT FOR DISK.
1 BANK0:TX$="BLITZ!":X=1:DO
2  IF ASC(MID$(TX$,X,1))<>PEEK(DEC("1C25")+X) THEN EXIT:ELSE X=X+1
3 LOOP UNTIL X>LEN(TX$):IF X>LEN(TX$) THEN PRINT "BLITZ!":GOTO 20
5 PRINT "INSERT DISK AND PRESS KEY TO CONTINUE":GETKEY I$

20 BANK15:POKE 58,128:CLR
25 VE=128*256:EI%=80
26 TL=0
27 W%=20:H%=11
#27 W%=8:H%=8

#RQ%(): RENDERING QUEUE OF WALL TILES
#EQ%(): ENTITY RENDERING QUEUE FOR GHOST
#GC%(): GHOST-COORDINATE. USED FOR DISPLAYING HITS IN COMBAT
30 DIM RL%(5,2),M%(W%*H%-1),V%(3,19),P%(7),GS%(2),TL%(1),MP%(2),PP%(4),PS%(4),FD%(3),PF%(4),RQ%(8),PH%(4)
31 DIM EC%(2),PD%(2),VD%(15),GI%(3),GV%(3,3),FC%(95),T%(19),MI$(52),KB$(9),MI%(17),EQ%(5),GC%(3),PK(2,7)
#HS%(): HIGH-SCORES. DIMENSION 0=ALL-TIME, 1=TODAY. 5 ENTRIES EACH
#HS$(): NAMES OF HIGH-SCORE ENTRIES
32 DIM HS%(1,4),HS$(1,4)

35 FAST:GRAPHIC0:GOSUB 10000

40 REM CL=CHECKLIST:RL=RENDERLIST:M=MAP:VL=VIEWLIST:TL%() TELEPORT LOCATIONS

# GS%():GAMESTATE
#       0=TOTAL COINS TO COLLECT
#       1=COINS LEFT TO COLLECT
#       2=STEPS TAKEN SO FAR


#46 W%=8:H%=8

# PH%:PLAYER HEALTH. 0 IS PLAYER, 1-4 ARE GHOSTS
# PS%:PLAYER SPAWNPOINT
# PP%:PLAYER POSITION
# PF%:PLAYER FACING DIRECTION
# EC%:ENEMY CHECK LIST (CONTAINS VALUES 4,10,17)
# PD%:POSITION DELTAS (USED FOR TARGET VECTOR CALCULATION)
# GV%:GHOST-VIEW (USED TO SHOW CORRECT GHOST SPRITE FOR DIFFERENT ANGLES)
# FC%:FONT COORDINATES


#FD%() FACING DIRECTION COMPASS. 78,69,83,87 - 32
50 FD%(0)=46*18:FD%(1)=37*18:FD%(2)=51*18:FD%(3)=55*18
#56 MP%(0)=56:MP%(1)=31:MP%(2)=MP%(0)*MP%(1)
# MP%(0):WIDTH/2
# MP%(1):HEIGHT
55 MP%(0)=W%*2:MP%(1)=H%:MP%(2)=MP%(0)*MP%(1):EC%(0)=4:EC%(1)=10:EC%(2)=17

57 TX$="PREPARING MAP DATA...":GOSUB 800


#  MAP DATA

#  CLEAR VRAM OF MAP
60 ::VMF MA,0,MP%(2)

62 BANK1
63 FOR X=0TOMP%(0)/2*MP%(1)-1:REM 28*MP%(1)-1:REM 11*20-1
64  READ MV$
65  IF MV$="2" THEN GS%(0)=GS%(0)+1:GOTO75
66  IF MV$="6" THEN PS%(0)=X:GOTO75
67  IF MV$="8" THEN TL%(TL)=X:TL=TL+1:GOTO75

68  IF MV$="B" THEN PS%(1)=X:GOTO75
69  IF MV$="F" THEN PS%(2)=X:GOTO75
70  IF MV$="H" THEN PS%(3)=X:GOTO75
71  IF MV$="J" THEN PS%(4)=X:GOTO75

72  IF MV$="X" THEN EX%=X

75  MV=FNMV(ASC(MV$))
76  POKE VE+X,MV:IF (MVAND1)=1 THEN MV=FNCL(1):ELSEMV=255
77  C1=MA+X+X
78  ::VMF C1,MV,2
79 NEXT
80 BANK15:REM SLOW
81 PRINT "MAPDATA UNTIL "C1

82 IF PS%(0)=0 THEN PRINT "NO STARTPOINT SET ON MAP":GRAPHIC0:SLOW:END

83 TX$="INIT NAVIGATION DATA...":GOSUB 800

#  NAVIGATION POSITION UPDATE DATA
#84 FOR X=0TO7:READ MV:P%(X)=MV:NEXT
84 P%(0)=-W%:P%(1)=W%:P%(2)=1:P%(3)=-1:P%(4)=W%:P%(5)=-W%:P%(6)=-1:P%(7)=1

#  FACING NORTH
85 L=-1:R=-L:F=-W%:B=-F:D=0:GOSUB 90
#  FACING EAST
86 L=-W%:R=-L:F=1:B=-F:D=1:GOSUB 90
#  FACING SOUTH
87 L=1:R=-1:F=W%:B=-F:D=2:GOSUB 90
#  FACING WEST
88 L=W%:R=-L:F=-1:B=-F:D=3:GOSUB 90

89 GOTO 100


#  DIRECTION MAPPING COORDINATES
90 V%(D,1)=L:V%(D,2)=R
91 V%(D,3)=L+F:V%(D,4)=F:V%(D,5)=R+F
92 V%(D,6)=V%(D,3):V%(D,7)=V%(D,5)
93 V%(D,8)=L+F+F:V%(D,9)=V%(D,8):V%(D,10)=F+F:V%(D,11)=F+F+R:V%(D,12)=V%(D,11)
94 V%(D,13)=F+F+L:V%(D,14)=F+F+R
95 V%(D,15)=L+F+F+F:V%(D,16)=V%(D,15):V%(D,17)=F+F+F:V%(D,18)=F+F+F+R:V%(D,19)=V%(D,18)
96 RETURN


99 TX$="INIT LUT ARRAYS...":GOSUB 800
# BUILD ARRAY FOR VECTOR TRACKING
100 VD%(0)=-1:VD%(1)=-W%:VD%(2)=1:VD%(3)=W%:VD%(4)=-W%:VD%(5)=1:VD%(6)=W%:VD%(7)=-1
101 VD%(8)=1:VD%(9)=W%:VD%(10)=-1:VD%(11)=-W%:VD%(12)=W%:VD%(13)=-1:VD%(14)=-W%:VD%(15)=1

# BUILD ARRAY FOR RENDERLIST
102 FOR X=0TO5:FORY=0TO2:READMV:RL%(X,Y)=MV:NEXT:NEXT

# BUILD GHOST-VIEW ARRAY GV%() (X=PLAYER FACING DIRECTION, Y=GHOST FACING DIRECTION)
104 FOR X=0TO3:FORY=0TO3:READ MV:GV%(X,Y)=MV:NEXT:NEXT

# TIMEDEMO
#115 TD$="WWEWWEWWQWWQWWQWWWWWQAAAAAEAAWWWWWQWWWQ"

105 TX$="PREPARING MAIN MENU...":GOSUB 800

#   ROTATING MENU SELECTOR
106 MI%(6)=15*18:MI%(7)=13*18:MI%(8)=60*18:MI%(9)=92*18

#   PRE-CALC MAIN MENU LINE OFFSETS
107 FOR X=0TO5
108  MI%(X)=AP+X*640+2880+(80-LEN(MI$(X))*3)/2
109 NEXT

#   LINE OFFSETS FOR SETTINGS MENU
#109 FOR X=10TO17:MI%(X)=AP+(X-10)*560+2880:NEXT


#############
# MAIN MENU #
#############
110 GOSUB 2800
111 ::VMF AP,0,VR(3)

#   RTV TAKES 6-7 JIFFIES AT 2 MHZ
114 ::RTV 65280-3072,TA,FT

#   VMC TAKES 1-2 JIFFIES AT 2 MHZ
117 ::VMC TA,AP+2,73,32,EI%

120 MI%=0
122 FOR TD=0TO5
124  GOSUB 970
126 NEXT

# RENDER INITIAL CURSOR
130 L%=6
132 DO

134  SM=TI

135  C1=CA+MI%(L%):C2=MI%(MI%)-6
140  ::VMC C1,C2,3,6,80

150  GET I$
152  IF I$=KB$(2) OR I$=KB$(9) THEN MI%=MI%+1:IFMI%>5THENMI%=0:GOTO 185
154  IF I$=KB$(0) OR I$=KB$(8) THEN MI%=MI%-1:IFMI%<0THENMI%=5:GOTO 185
156  IF I$=CHR$(13) THEN 189

158  IF TI-SM<10 THEN 150

185  ::VMC CA,C2,3,6,80
187  L%=L%+1:IFL%>9THENL%=6

189 LOOP UNTIL I$=CHR$(13)

#  200 PLAY
# 9000 INSTRUCTIONS
# 2300 HIGH-SCORES
# 9200 ACKNOWLEDGEMENTS
# 9400 SETTINGS (HIDDEN FOR NOW)
# 9600 EXIT
190 ON MI%+1 GOTO 200,9000,2305,9400,9200,9600



#   GAME-STATE RESTARTS HERE

#   COLLECTED COINS
200 TX$="INIT MAP...":GOSUB 800
202 Q%=0:GS%(1)=GS%(0):GS%(2)=0

203 BANK1:FOR X=0TOMP%(0)/2*MP%(1)-1:M%(X)=PEEK(VE+X):NEXT:BANK15

204 TX$="INIT CREATURES...":GOSUB 800

#  EACH CREATURE HAS 3 HEALTH (INCLUDING PLAYER)
#  BUT PLAYER HAS RANGED ATTACK, ENEMIES ONLY HAVE MELEE ATTACK
205 FOR X=0TO4
206  PH%(X)=3
207  PF%(X)=0
208  PP%(X)=PS%(X)
210 NEXT

211 ::VMF AP,0,EI%
212 AP=9600

219 TX$="INIT STATUSBAR...":GOSUB 800
#   WRITE FACING DIRECTION
220 GOSUB 610

#   WRITE NR OF COINS LEFT TO COLLECT
222 GOSUB 602

#   WRITE PLAYER HITPOINTS
224 GOSUB 650

#   WRITE STEPS TAKEN
226 GOSUB 1500

227 TX$="INITIAL VIEW...":GOSUB 800
#   RENDER INITIAL VIEW
228 PF%(0)=0:GOSUB 340:TX=1:S2=TI

229 AP=0

#232 Y=2:GOSUB 2200


#   CURTAIN EFFECT WHEN STARTING DUNGEON
230 C1%=AP+EI%+EI%:C2%=AP:T3%=50:C3%=VR(1)+7840:C4%=C3%-VR(1)
231 FOR X=0 TO 48
#    MOVE CURRENT SCREEN UP TWO SCANLINES
232  ::VMC C1%,C2%,EI%+EI%,T3%,EI%+EI%
233  T3%=T3%-1

#    COPY TWO LINES FROM BACKBUFFER TO VISIBLE MEMORY
234  ::VMC C3%,C4%,EI%+EI%
235  C3%=C3%-EI%-EI%:C4%=C4%-EI%-EI%

236 NEXT

#   COPY TOPMOST LINE FROM BACKBUFFER TO VISIBLE MEMORY
237 ::VMC C3%,C4%,EI%+EI%


# THERE IS A BLITZ PROBLEM WITH THE FOLLOWING BLOCK
# SHOULD BE A MORE OPTIMIZED VERSION OF THE ABOVE
#230 C1%=AP+EI%:C2%=AP:C3%=VR(1)+7920:C4%=C3%-VR(1)
#231 FOR X=99 TO 1 STEP-1
#232  ::VMC C1%,C2%,EI%,X,EI%

#234  ::VMC C3%,C4%,EI%
#235  C3%=C3%-EI%:C4%=C4%-EI%

#236 NEXT

#237 ::VMC C3%,C4%,EI%


#238 Y=1:GOSUB2200
239 GOSUB 2800
240 TX$="GO!!!":GOSUB 800

241 POKE208,0:DO
242  REM SLOW
#242  I$=MID$(TD$,TX,1):TX=TX+1
243  GETKEY I$
244  I=ASC(I$)
#244  FAST

#    RQ%: IF RENDER-QUEUE SHOULD BE USED FOR BACKWARDS RENDERING (FORWARD AND LOOK LEFT/RIGHT)
#    RD%: IF SCREEN NEEDS TO BE UPDATED
245  RQ%=0:RD%=-1:EN%=0

####################
# INPUT PROCESSING #
####################

#    LOOK LEFT/RIGHT
250  IF I$=KB$(4) OR I$=KB$(5) THEN BEGIN
252   RQ%=-1:TU%=-1:PF%(0)=PF%(0)+(I$=KB$(4))-(I$=KB$(5))
254   IF PF%(0)<0 THEN PF%(0)=3
256   IF PF%(0)>3 THEN PF%(0)=0

#     INCREASE STEP COUNT
258   GOSUB590

259  BEND:GOTO300


#    MD%: MOVE-DIRECTION (NOT CONFUSED WITH LOOKING LEFT AND RIGHT)
#    MOVE FORWARD/BACKWARD
260  IF I$=KB$(0) THEN RQ%=-1:T=FNPP(0):MD%=0:GOTO 520
265  IF I$=KB$(2) THEN T=FNPP(1):MD%=2:GOTO 520

#    STRAFE LEFT/RIGHT
270  IF I$=KB$(1) THEN T=FNPG(0):MD%=3:GOTO 520
275  IF I$=KB$(3) THEN T=FNPG(2):MD%=1:GOTO 520

#    DISPLAY MAP
280  IF I$=KB$(7) THEN GOSUB 1000:GOTO 338

#    FIGHT
285  IF I$=KB$(6) THEN GOSUB 1300:GOTO 300

#    MENU
290  IF I$="" THEN GOSUB 1600:GOTO 338

#    EXIT
#290  IF I$="X" THEN SLOW:GRAPHIC0:GOTO330


###################
# ENEMY REACTIONS #
###################

300  GOSUB 2000

#################
# RENDER OUTPUT #
#################

#    INPUT DONE AT THIS POINT. CALL RENDERING METHOD
305  IF RD% THEN GOSUB 340

#    TEXT UPDATE FLAG. CHECK IF TEXT ON TOP NEEDS UPDATING
307  IF TU% THEN GOSUB 610

#    HITPOINT UPDATE FLAG
308  IF HU% THEN BEGIN
309   SOUND 3,965,10,,,,3

#    IF ATTACKED FROM THE FRONT: 7,132 FROM BEHIND: 7,134
#    IF ATTACKED FROM THE LEFT: 2,101 FROM RIGHT: 2,103

#          X=0:LEFT, X=1:FRONT, X=2:RIGHT, X=3:BEHIND
310   EN%=0:X=0:DO:Y=FNPG(X)

311    IF Y=PP%(1) THEN BEGIN

312     C1=102+(X=0)-(X=2)
313     C2=133+(X=1)-(X=3)
315     ::RGW2,C1
316     ::RGW7,C2

318    BEND:EXIT
319    X=X+1

320   LOOP WHILE X<4


#     RED BORDER
324   ::RGW DEC("1A"),8
325   GOSUB 650

#     WHITE BORDER
326   ::RGW DEC("1A"),DEC("FF")
327   ::RGW7,133
328   ::RGW2,102
329   TX$="YOU ARE HIT FOR 1 POINT!":GOSUB 800

330  BEND

#    UPDATE STEPS
335  IF SU% THEN TX$=MID$(STR$(GS%(2)),2):C2=AP+63:C3=C2:GOSUB 1510

#    WRITE EXIT SIGN
#    NEEDS TO BE DONE HERE, WOULD BE DRAWN OVER OTHERWISE
336  IF M%(PP%(0))=40 THEN TX$="EXIT CLOSED":X=0:C2=1440:GOSUB 1700

338 LOOP UNTIL Q%

# RG%=1 --> 2300: HIGHSCORE SCREEN - WIN (DECIDE THERE, WHETHER A NEW ONE HAS TO BE ENTERED)
# RG%=2 -->  200: RESTART DUNGEON
# RG%=3 -->  110: MAIN MENU (LEAVE DUNGEON WAS CHOSEN)
# RG%=4 --> 2305: SHOW HIGHSCORES (PLAYER DIDN'T LEAVE LEVEL THROUGH EXIT)
339 ON RG% GOTO 2300,200,110,2305


#1175 UNCOMPILED WITH INTEGERS
#1080 UNCOMPILED WITH REDUCED NR OF PARAMETERS
#1125 UNCOMPILED WITH AND1 FOR MOVEMENT CHECK
#1071 UNCOMPILED WITH GOTO300 FOR INPUT CHECK
#1024 UNCOMPILED WITH S REMOVED FROM RENDERING
#1021 REMOVED F% FROM TU RENDERING
#1274 JIFFIES AFTER A LOT OF NEW STUFF (INCLUDING RENDER-LIST FOR CORRECT MOTION)

#536 COMPILED WITH INTEGERS
#307 COMPILED WITH INTEGERS AND NO CALCS IN BASIC (VS 1274 FOR UNCOMPILED)

#################
# RENDERING
#################

340 C1=AP+400

#   TILE-RENDER ANALYSIS
342 ::VMF C1,0,7600

#   HERE-LEFT AND RIGHT
344 GX=2

#   IF MOTION WAS STRAFE-LEFT
346 IF I$=KB$(1) THEN RL=0:GOSUB 620:GOSUB 400:RL=1:GOSUB 620:GOTO 354

#   IF MOTION WAS STRAFE-RIGHT
348 IF I$=KB$(3) THEN RL=1:GOSUB 620:GOSUB 400:RL=0:GOSUB 620:GOTO 354

#   FORWARD/BACKWARD
350 RL=0:GOSUB 620:RL=1:GOSUB 620:GOSUB400



#   RENDER IN OPPOSITE ORDER? (ALWAYS, EXCEPT WALKING BACKWARDS)
352 IF RQ% THEN FORX=QX%-1TO0STEP-1:DV=RQ%(X):GOSUB630:NEXT:QX%=0


#   DISPLAY COINS TO COLLECT (IF THERE)
354 C1=CA+32*18

356 IF T%(4)=2 THEN BEGIN
357  C2=AP+EI%*EI%+40
358  ::VMC C1,C2,3,6,EI%
359 BEND

360 IF FNM(3)=2 THEN BEGIN
361  C2=AP+EI%*EI%+20-484:IF T%(4)=1 THEN C2=C2-6
362  ::VMC C1,C2,3,6,EI%
363 BEND

365 IF FNM(5)=2 THEN BEGIN
366  C2=AP+EI%*EI%+60-480:IF T%(4)=1 THEN C2=C2+6
367  ::VMC C1,C2,3,6,EI%
368 BEND

#   IF WALL RIGHT IN FRONT OF US, DON'T CHECK THE TILES ONE STEP FURTHER AWAY
369 IF T%(4)=1 THEN 390

370 IF T%(10)=2 THEN BEGIN
371  C2=AP+EI%*64+40
372  ::VMC C1,C2,3,6,EI%
373 BEND

375 IF FNM(9)=2 THEN BEGIN
376  C2=AP+EI%*61+25:IF T%(10)=1 THEN C2=C2-3
377  ::VMC C1,C2,3,6,EI%
378 BEND

380 IF FNM(11)=2 THEN BEGIN
381  C2=AP+EI%*61+52:IF T%(10)=1 THEN C2=C2+3
382  ::VMC C1,C2,3,6,EI%
383 BEND



#   DISPLAY GHOSTS (IF THERE)

390 EN%=0:X=1
#391 FOR X=1TO4
#    IF POSITION OF GHOST X IS IN FRONT OF PLAYER (EN%=PLAYER, FNPG(0)=FRONT OF PLAYER)
#    Y=DISTANCE
#    Z=WHICH HALF OF THE GHOST TO RENDER (1=RIGHT HALF, 0=LEFT HALF)
#391  SLOW:PRINT "PP="PP%(0)",PP%(1)="PP%(X)",FNMP(4)="FNMP(4)",FNM(4)="FNM(4)",FNMP(10)="FNMP(10)",FNM(10)="FNM(10)

391  IF PP%(X)=FNMP(4) THEN Y=0:RD%=-1:GOSUB 850:GOTO 398
392  IF PP%(X)=FNMP(3) THEN Y=0:Z=ABS(FNM(4)<>1):H=ABS(FNM(4)=1):GOSUB870:GOTO 398
393  IF PP%(X)=FNMP(5) THEN Y=0:Z=ABS(FNM(4)=1):H=ABS(FNM(4)=1):GOSUB870:GOTO 398

394  IF T%(4)=1 THEN 398

395  IF PP%(X)=FNMP(10) AND FNM(4)<>1 THEN Y=1:GOSUB 850:GOTO 398
396  IF PP%(X)=FNMP(9) THEN Y=1:Z=ABS(FNM(10)<>1):H=ABS(FNM(10)=1):GOSUB 880:GOTO 398
397  IF PP%(X)=FNMP(11) THEN Y=1:Z=ABS(FNM(10)=1):H=ABS(FNM(10)=1):GOSUB 880

#396 NEXT

398 FORX=0TO19:T%(X)=0:NEXT

399 RETURN


#   HERE-CENTER
400 GOTO 415
#400 EN%=0:FOR X=1TO4:IF PP%(X)=FNMP(4) THEN Y=0:GOSUB 850
#405 NEXT

415 T%(4)=FNM(4):IF T%(4)=1 THEN DV=3:ON 1+ABS(RQ%)GOSUB630,640:RETURN

420 IF I$=KB$(1) THEN RL=2:GOSUB620:GOSUB470:RL=3:GOSUB620:GOTO 435
425 IF I$=KB$(3) THEN RL=3:GOSUB620:GOSUB470:RL=2:GOSUB620:GOTO 435

430 RL=2:GOSUB620:RL=3:GOSUB620:GOSUB470:REM GOTO NEAR-CENTER
435 RETURN

#   NEAR-CENTER
470 GOTO 480
#470 FOR X=1TO4:IF PP%(X)=FNMP(10) THEN Y=1:GOSUB 850
#475 NEXT

480 T%(10)=FNM(10):IF T%(10)=1 THEN DV=9:ON 1+ABS(RQ%)GOSUB630,640:RETURN

485 GX=1:IF I$=KB$(1) THEN RL=4:GOSUB620:RL=5:GOSUB620:GOTO 500
490 RL=5:GOSUB620:RL=4:GOSUB620

#   FAR CENTER
500 T%(17)=FNM(17):IF T%(17)=1 THEN DV=16:ON 1+ABS(RQ%)GOSUB630,640

510 RETURN

######################
# MOVEMENT UPDATE
# INCLUDING TELEPORTERS, WALLS, ...
########################
#   CHECK IF BLOCKED BY WALL
520 V%=M%(T):IF (V% AND 1)=1 THEN 338

#   CHECK IF BLOCKED BY GHOST
526  X=1:DO:IF PP%(X)=TTHENEXIT
527  X=X+1:LOOPUNTILX>4

529 IF X<=4 THEN 338

530 PP%(0)=T

#   DO STEP UPDATE
535 GOSUB 590

#   CHECK IF A COIN IS TO BE COLLECTED FROM HERE
540 IF V%=2 THEN GOSUB 600:GOTO 580

#   CHECK IF THIS IS A TELEPORT FIELD
550 IF V%=8 THEN PP%(0)=TL%(ABS(PP%(0)=TL%(0))):GOTO 580

#   CHECK IF EXIT
560 IF V%=40 THEN TX$="COLLECT ALL FOR EXIT":GOSUB800:GOTO580
570 IF V%=42 THEN GOSUB 1200

580 GOTO 300

590 GS%(2)=GS%(2)+1:SU%=-1:RETURN

#############################
#   UPDATE COINS LEFT TO COLLECT
#####
600 M%(PP%(0))=0:GS%(1)=GS%(1)-1
602 TX$=MID$(STR$(GS%(1))+" ",2)
603 FOR X=1 TO LEN(TX$)
604  C1=CA+FC%(FN TX(X))
605  C2=AP+15+3*(X-1)
606  ::VMC C1,C2,3,6,EI%
607 NEXT

608 IF GS%(1)<=0 THEN M%(EX%)=42:TX$="FIND THE EXIT!":GOSUB800

609 RETURN

#####################
# UPDATE COMPASS
####################


610 TU%=0
611 C1=CA+FD%(PF%(0)):C2=AP+3
612 ::VMC C1,C2,3,6,EI%
614 RETURN

#   CHECK VALUES TO RENDER
620 FOR G=0 TO GX
622  DV=RL%(RL,G):T%(DV)=FNM(DV):IF T%(DV)=1 THEN DV=DV-1:ON 1+ABS(RQ%)GOSUB630,640:GOTO 626
624 NEXT
626 RETURN

#   RENDER FRAME
630 C1=DA+DM%(DV,0):C2=AP+DM%(DV,4):C3=DM%(DV,1):C4=DM%(DV,2)
632 ::VMC C1,C2,C3,C4,EI%
634 RETURN

#   QUEUE FRAME FOR RENDERING
640 RQ%(QX%)=DV:QX%=QX%+1:RETURN


#   UPDATE PLAYER HITPOINTS
650 HU%=0
660 TX$="HP:"+STR$(PH%(0))
670 FOR X=1 TO LEN(TX$)
680  C1=CA+FN TX(X)*18
690  C2=AP+30+3*(X-1)
700  ::VMC C1,C2,3,6,EI%
710 NEXT

715 IF PH%(0)>0 THEN 790


719 TX$="YOU ARE KNOCKED OUT!":GOSUB 800

#   IF PLAYER DEAD, DISPLAY LOSE MESSAGE
720 C1%=20*EI%+12:C2%=C1%-322:C3%=C2%:C4%=FNCL(4)
722 FOR X=0TO39
730  ::VMF C3%,C4%,60
732  C3%=C3%+EI%
735 NEXT

#   DISPLAY TEXT
740 TX$="YOU LOOSE!":TX%=(60-LEN(TX$)*3)/2

#   WRITE TEXT
744 C3%=C1%+1*6*EI%+TX%
745 FOR X=1TOLEN(TX$):F=FN TX(X)
750  C1=CA+FC%(F):C3%=C3%+3
755  ::VMC C1,C3%,3,6,EI%
760 NEXT

#   PRESS KEY
770 GOSUB 900

785 POKE 208,0:GETKEY I$

789 Q%=-1:RG%=4

790 RETURN


#   WRITE TEXT TO SCROLLING FIELD ON THE BOTTOM
#   FIRST, SCROLL EXISTING TEXT UP ONE LINE (IE 6 SCANLINES)
#   THE LINE APPEARING ON BOTTOM IS EMPTY

#   FIRST LINES APPEAR FROM TOP TO BOTTOM
#   SCROLLING STARTS WHEN LINE 5 IS REACHED
800 IF BT%<6 THEN 825

#   C1:SOURCE ADDRESS (LINE 1)
#   C2:TARGET ADDRESS (LINE 0)
802 C2=VR(4):C1=C2+EI%

#   THE VMC COMMANDS SCROLLS 36 SCANLINES UP FOR ONE SCANLINE
#     (SHOULD BE THE FULL BOTTOM TEXTAREA)
#   THE LOOP AROUND IT REPEATS 6 TIMES, SCROLLING EVERYTHING UP 6 SCANLINES (IE 1 LINE OF TEXT)
805 FOR X=0TO5
810  ::VMC C1,C2,EI%,36,EI%
815 NEXT
#820 BT%=BT%+1

#   FILL NEW LINE ON BOTTOM WITH NEW TEXT
825 C2=FNBT(BT%):IF BT%=6 THEN C2=C2-480
830 FOR X=1TOLEN(TX$):F=FN TX(X)
835  C1=CA+FC%(F):C2=C2+3
840  ::VMC C1,C2,3,6,EI%
845 NEXT
846 IF BT%<6 THEN BT%=BT%+1
849 RETURN

##################
#   RENDER GHOST #
##################

#   GM():GHOST-MEMORY ADDRESS (IN VRAM)
#   Y:DISTANCE (0=NEAR, 1=FAR)
#   GV%(PLAYER-FACING-DIRECTION,GHOST-FACING-DIRECTION)
#   0:VRAM-OFFSET OF SPRITE
850 GS%=GV%(PF%(0),PF%(1))
#   SOURCE ADDRESS
851 C1=GM(Y,GS%,0)
#   TARGET ADDRESS
855 C2=AP+GM(Y,PF%(1),4)
#   WIDTH
856 C3=GM(Y,PF%(1),1)
#   HEIGHT
857 C4=GM(Y,PF%(1),2)
860 ::VMC C1,C2,C3,C4,EI%

865 RETURN

#######################
#   RENDER HALF GHOST #
#   CLOSE BY          #
#######################
#   FOR GHOST TO THE RIGHT, SOURCE IS FIRST HALF OF SPRITE.
#   SPRITE WIDTH IS HALF (2)
#   Z=1:RENDER RIGHT HALF
#   Z=0:RENDER LEFT HALF
870 GS%=GV%(PF%(0),PF%(1))

#   C3:WIDTH
871 C3=GM(Y,GS%,1)
#   C5:HALF THE WIDTH
872 C5=C3/2
#   C4:HEIGHT
873 C4=GM(Y,GS%,2)

#   FOR GHOST TO THE LEFT, SOURCE IS SECOND HALF OF SPRITE
874 C1=GM(Y,GS%,0)+C5*Z

#   TARGET
875 C2=AP+GM(Y,GS%,4)

#   H:MIDDLE WALL IS VISIBLE
876 IF Z=0 THENC2=C2+23-H*50:ELSE C2=C2-21+H*50

878 ::VMC C1,C2,C5,C4,EI%,C3
879 RETURN

#######################
#   RENDER HALF GHOST #
#   FAR AWAY          #
#######################
880 GS%=GV%(PF%(0),PF%(1))

#   C3:WIDTH
881 C3=GM(Y,GS%,1)
#   C5:HALF THE WIDTH
882 C5=C3/2
#   C4:HEIGHT
883 C4=GM(Y,GS%,2)

#   FOR GHOST TO THE LEFT, SOURCE IS SECOND HALF OF SPRITE
884 C1=GM(Y,GS%,0)+C5*Z

#   TARGET
885 C2=AP+GM(Y,GS%,4)

#   H:MIDDLE WALL IS VISIBLE
#   C2+/- OFFSET FOR MIDDLE HALL INVISIBLE, * FOR MIDDLE HALL VISIBLE
886 IF Z=0 THENC2=C2+20-H*30:ELSE C2=C2-6+H*30

888 ::VMC C1,C2,C5,C4,EI%,C3
889 RETURN


#   WRITE "PRESS KEY" FOR WIN OR LOSE GAME
900 TX$="PRESS KEY":TX%=(60-LEN(TX$)*3)/2

910 C3%=C1%+3*6*EI%+TX%
920 FOR X=1TOLEN(TX$):F=FN TX(X)
930  C1=CA+FC%(F):C3%=C3%+3
940  ::VMC C1,C3%,3,6,EI%
950 NEXT

960 RETURN


# PRINT TEXT TO LOW-RES AREA (FOR MAIN MENU)
# TD CONTAINS THE LINE, TEXT IS AUTOMATICALLY CENTERED
# X-POS=80-LEN*3

970 C2=MI%(TD):C3=C2
975 FOR X=1 TO LEN(MI$(TD))
980  C1=CA+FC%(FN MI(X))
985  ::VMC C1,C3,3,6,EI%
990  C3=C3+3
995 NEXT
999 RETURN

###############
# DISPLAY LEVEL MAP
###############

1000 C1%=20*EI%+12:C2%=C1%-322:C3%=C2%

#    CREATE FRAME FOR MAP
1010 C3%=C3%+EI%:C4%=FNCL(4)
1020 ::VMF C3%,C4%,60
1030 ::VMC C3%,C3%+EI%,60,39,EI%,1

#    DISPLAY MAP
1050 ::VMC MA,C1%,MP%(0),MP%(1),EI%

#    DISPLAY PLAYER POSITION
#    C2%=LINES OFFSET
#    C3%=COLS OFFSET
1100 C2%=PP%(0)/MP%(0)*2
1110 C3%=C2%*EI%
1115 C4%=PP%(0)-C2%*MP%(0)/2
1120 C1%=C1%+C3%+C4%+C4%
1125 CL%=0
1126 TZ=TI

1130 POKE 208,0:DO
1135  GET I$:IF LEN(I$)>0 THEN EXIT
1140  IF TI-TZ<30 THEN 1160
1143  CL%=ABS(CL%-1)
1145  C2%=FNCL(CL%*8)
1150  ::VMF C1%,C2%,2
1155  TZ=TI
1160 LOOP

1170 GOSUB340

1199 RETURN

################
# DISPLAY EXIT MESSAGE
################
1200 C1%=20*EI%+12:C2%=C1%-322:C3%=C2%

#    CREATE FRAME FOR MESSAGE
1210 FOR X=0TO39
1220  C3%=C3%+EI%:C4%=FNCL(4)
1230  ::VMF C3%,C4%,60
1240 NEXT

#    DISPLAY TEXT
1250 TX$="YOU WIN!":TX%=(60-LEN(TX$)*3)/2

#   WRITE TEXT
1255 C3%=C1%+1*6*EI%+TX%
1260 FOR X=1TOLEN(TX$):F=FN TX(X)
1265  C1=CA+FC%(F):C3%=C3%+3
1270  ::VMC C1,C3%,3,6,EI%
1275 NEXT

1279 GOSUB 900

1280 POKE 208,0:GETKEY I$

1290 Q%=-1:RG%=1

1299 RETURN

##################
# FIGHT AND COMBAT
##################
# FIGHT IS SIMPLE
# - PLAYER CAN ATTACK RANGED, AS SOON AS ENEMY IS VISIBLE
# - ENEMY MOVES ONE FIELD PER ACTION
# - ONCE ENEMY IS NEXT TO PLAYER, EACH ACTION HITS.
# - PLAYER ACTION ALWAYS COMES FIRST
# - PLAYER HAS 3 HEALTH
# - MONSTERS?

# CHECK WHICH MONSTER WE ARE FACING (TRACK MAP IN FACING DIRECTION) (EC%())
# REDUCE HIT POINTS OF MONSTER
# IF MONSTER IS STILL ALIVE, REDUCE HIT POINTS OF PLAYER
# IF PLAYER IS STILL ALIVE, BACK TO INPUT CHECK

# CX%:CHECK-INDEX OF TILES TO CHECK. TAKEN FROM EC%(). CAN BE 4,10,17
# EN%:ENEMY-ID
1300 EN%=0:CX%=0:X=1
1310 DO
1320  IF PP%(X)=FNMP(4) THEN EN%=X:CX%=1:GOTO 1330
1322  IF PP%(X)=FNMP(10) THEN EN%=X:CX%=2:GOTO 1330
1324  IF PP%(X)=FNMP(17) THEN EN%=X:CX%=3:GOTO 1330
1326  GOTO 1335

#1330  PRINT "ENEMY "EN%" "CX%" TILES AWAY AT "PP%(X):EXIT
1330  EXIT

#1335  PRINT "NOTHING TO ATTACK"
1335  X=X+1
1350 LOOP UNTIL X>4
1355 IF EN%=0 THEN TX$="YOU ATTACK... NOTHING":GOSUB 800:RETURN

# CALCULATE ATTACK DAMAGE
1400 PH%(EN%)=PH%(EN%)-1


1405 SOUND 3,965,10,,,,3
1410 C1=CA+FC%(1):C2=GC%(CX%)
1415 ::VMC C1,C2,3,6,EI%


1425 TX$="GHOST DAMAGED FOR 1 POINT":GOSUB 800
1430 IF PH%(EN%)>0 THEN RETURN

#    HANDLE ENEMY KNOCKOUT
1440 TX$="GHOST VANISHED":GOSUB 800
#    ENEMY LOCATION TO RESPAWN POINT
1445 PP%(EN%)=PS%(EN%):PF%(EN%)=0:PH%(EN%)=3

#    REDRAW VIEW
1450 RD%=-1

1499 RETURN


#######################
# DISPLAY STEPS TAKEN #
#######################
1500 TX$="STEPS:0   ":C2=AP+45:C3=C2
1510 SU%=0
1520 FOR X=1 TO LEN(TX$)
1530  C1=CA+FC%(FN TX(X))
1540  C3=C3+3
1550  ::VMC C1,C3,3,6,EI%
1560 NEXT

1590 RETURN


#########################
# DISPLAY IN-GAME POPUP #
#########################
# RESUME GAME
# RESTART DUNGEON
# EXIT DUNGEON

# DRAW POPUP FRAME
1600 C1=24*EI%+9:C2%=0
1605 FOR X=0TO48
1610  ::VMF C1,C2%,63
1615  C1=C1+EI%
1620 NEXT

1630 C2=30*EI%

# WRITE MENU TEXT
1640 TX$="GAME PAUSED"
1645 X=0:GOSUB 1700
1647 C2=C2+1280

1650 TX$="RESUME PLAY"
1655 X=0:GOSUB 1700
1657 C2=C2+640

1660 TX$="RESTART DUNGEON"
1665 X=1:GOSUB 1700
1667 C2=C2+640

1670 TX$="LEAVE DUNGEON"
1675 X=2:GOSUB 1700
1677 C2=C2+640

1679 C3=30*EI%+1280

1681 L%=6:MI%=0
1682 DO

1683  SM=TI

1684  C1=CA+MI%(L%):C2=MT%(MI%)
1685  ::VMC C1,C2,3,6,EI%

1686  GET I$
1687  IF I$=KB$(2) OR I$=KB$(9) THEN MI%=MI%+1:IFMI%>2THENMI%=0:GOTO 1691
1688  IF I$=KB$(0) OR I$=KB$(8) THEN MI%=MI%-1:IFMI%<0THENMI%=2:GOTO 1691
1689  IF I$=CHR$(13) THEN 1693

1690  IF TI-SM<10 THEN 1686

1691  ::VMC CA,C2,3,6,EI%
1692  L%=L%+1:IFL%>9THENL%=6

1693 LOOP UNTIL I$=CHR$(13)

# RG%: RETURN-GESTURE (WHAT TO DO AFTER LEAVING IN-GAME MENU)

#    1:RESUME GAME: RENDER CURRENT STATE AND RETURN TO GAME LOOP
1695 IF MI%=0 THEN GOSUB 340:RETURN

#    2:RESTART: LEAVE INPUT LOOP (Q%) AND SET RETURN GESTURE TO 1 TO RESTART LEVEL
1697 IF MI%=1 THEN Q%=-1:RG%=2:RETURN

#    3: LEAVE TO MAIN MENU
1698 IF MI%=2 THEN Q%=-1:RG%=3

1699 RETURN





#   WRITE TEXT OF MAIN MENU
1700 C4%=LEN(TX$)
1705 C3=C2+(EI%-C4%*3)/2
1706 MT%(X)=C3-6
1710 FOR X=1 TO C4%
1720  C1=CA+FC%(FN TX(X))
1730  ::VMC C1,C3,3,6,EI%
1740  C3=C3+3
1750 NEXT
1759 RETURN






#########################################
# ENEMY MOVEMENT AND ATTACK CALCULATION #
#########################################

#    CALCULATE TARGET VECTOR
#    IF DIRECTION IS OK, MOVE FORWARD
#    IF NOT, CHANGE DIRECTION
#    PX%/PY%: PLAYER COORDINATES
#    FD%:FACING DIRECTION OF GHOST
#    SF%:SKIP FORWARD (WHEN MOVING FORWARD DOESN'T WORK)
2000 PX%=FNPX(PP%(0)):PY%=FNPY(PP%(0)):SF%=0
2005 EN%=1:PD%=9999:T=9999:BX%=-1
2010 FD%=PF%(EN%)
#2015 PRINT "EN:"EN%",FD:"FD%",POS:"PP%(EN%)",PLR:"PP%(0)

# TILE TO THE LEFT
2030 X=0:PP%=FNPG(X):GOSUB 2100

# TILE IN FRONT
2040 IF NOT SF% THEN X=1:PP%=FNPG(X):GOSUB 2100

# TILE TO THE RIGHT
2050 X=2:PP%=FNPG(X):GOSUB 2100

2051 REM PRINT " BEST: X:"BX%",DELTA:"PD%" TO "TL

#    CHECK IF MONSTER SHOULD MOVE FORWARD
2059 IF PD%(1)=PD% THEN BEGIN
2060  T=FNPP(0):V%=M%(T)

2062  IF (V% AND 1)=1 THEN SF%=-1:PD%(1)=9999:GOTO 2080

2064  IF T=PP%(0) THEN PH%(0)=PH%(0)-1:HU%=-1:GOTO 2080

2066  PP%(EN%)=T:GOTO2090

2080 BEND:IF SF% THEN 2005


2084 IF PD%(0)=PD% THEN PF%(EN%)=FNFD(3):GOTO 2090
2086 IF PD%(2)=PD% THEN PF%(EN%)=FNFD(5):GOTO 2090


2089 IF BX%=-1 THEN SLOW:PRINT"XXX BX%=-1":STOP

#2090 PRINT "POS "PP%(EN%)", F "PF%(EN%):RETURN
2090 RETURN


# DO DELTA CALCULATION
2100 GX%=FNPX(PP%):GY%=FNPY(PP%)
2110 T=FNPD(0):PD%(X)=T:IF T<PD% THEN PD%=T:TL=PP%:BX%=X
#2120 PRINT "  TILE:"PP%",DELTA:"T
2130 RETURN


#############################################
# SWITCH VMC FROM INC TO DEC, OR VICE VERSA #
#############################################
2200 BANK0:FOR X=0TO7:PRINT PK(0,X)"="PK(Y,X):POKE PK(0,X),PK(Y,X):NEXT:BANK15:RETURN


####################
# HIGHSCORE SCREEN #
####################

# IF STEPS TAKEN ARE MORE THAN LAST ENTRY OF TODAY, JUST DISPLAY EXISTING SCORES
2300 IF GS%(2)<HS%(1,4) THEN GOSUB 2500

2305 ::VMF AP,0,VR(3)

2310 TX$="ALL TIME GREATEST":X=0:C2=320:GOSUB1700

2315 T=0:GOSUB 2480

2320 TX$="TODAY'S GREATEST":X=0:C2=4320:GOSUB1700
2325 T=1:GOSUB 2480

2465 GOSUB 2800:TX$="PRESS KEY TO RETURN":GOSUB 800
2470 POKE 208,0:GETKEY I$
2479 GOTO 110


2480 C2=C2+9+240
2482 FOR Y=0TO4
2484  C2=C2+560:C3=C2
2486  TX$=HS$(T,Y):C4%=LEN(TX$):GOSUB 1710

2488  TX$=MID$(STR$(HS%(T,Y)),2):C4%=LEN(TX$)
2490  C5%=(23-2-C4%)*3:C2=C2+C5%:C3=C2:C2=C2-C5%:GOSUB 1710
2492 NEXT
2499 RETURN

##############################
# ENTER NAME INTO HIGHSCORES #
##############################

2500 GOSUB 2800
2502 ::VMF AP,0,VR(3)

2505 TX$="YOU COLLECTED ALL GEMS IN":X=0:C2=1280:GOSUB 1700

2510 TX$=MID$(STR$(GS%(2)),2)+" STEPS":X=0:C2=C2+1280:GOSUB 1700

2520 TX$="PLEASE ENTER YOUR NAME":X=0:C2=C2+1280:GOSUB 1700

2530 ::VMF C2+1760+16,14,48

2540 L%=6:MI%=0:C3=C2+1280+19:TX$=""
2545 DO

#     SM IS THE TIMER FOR THE ANIMATION OF THE SELECTOR
2550  SM=TI

#     DRAW CURSOR
#     C1: SOURCE ADDRESS
#     C3: TARGET ADDRESS
2555  C1=CA+MI%(L%)
2560  ::VMC C1,C3,3,6,EI%

2565  GET I$:IF LEN(I$)=0 THEN 2585

2570  I=ASC(I$)
2575  IF I>=ASC("0") AND I<=ASC("Z") THEN BEGIN
2576   TX$=TX$+I$:C1=CA+FC%(I-32)
2577   ::VMC C1,C3,3,6,EI%
2578   C3=C3+3
2579  BEND

#     ACCEPT INPUT
2580  IF I=13 THEN 2600

#     DELETE KEY
2581  IF I=20 AND LEN(TX$)>0 THEN BEGIN
#      REMOVE CURSOR
2582   ::VMC CA,C3,3,6,EI%
2583   C3=C3-3:TX$=LEFT$(TX$,LEN(TX$)-1)
2584  BEND

#     ADVANCE ANIMATION FRAME 6 TIMES A SECOND
2585  IF TI-SM<10 THEN 2565

#     REMOVE SELECTOR FROM PREVIOUS POSITION
#2590  ::VMC CA,C3,3,6,EI%
#     UPDATE SELECTOR ANIMATION FRAME
2595  L%=L%+1:IFL%>9THENL%=6

2600 LOOP UNTIL I$=CHR$(13)

# REMOVE CURSOR
2605 ::VMC CA,C3,3,6,EI%

2610 T=0:GOSUB 2640
2615 T=1:GOSUB 2640

2619 RETURN



#    CHECK WHERE THE ENTRY GOES IN THE HIGHSCORES
2640 X=0:DO
2645  IF GS%(2)<HS%(T,X) THEN EXIT
2650  X=X+1
2655 LOOP UNTIL X>4

#    NO NEW HIGHSCORE. FOR ALL-TIME-HIGH, GOING TO 2799 ALSO SKIPS THE SAVER
2660 IF X>4 THEN 2799

#    ADD NEW SCORE
2670 FOR Y=3 TO X STEP -1
2675  HS%(T,Y+1)=HS%(T,Y)
2680  HS$(T,Y+1)=HS$(T,Y)
2685 NEXT
2690 HS%(T,X)=GS%(2)
2695 HS$(T,X)=TX$

#    FOR ALL-TIME-HIGH, SAVE HIGHSCORES TO DISK
#    SKIP THIS PART, IF THIS IS ABOUT TODAY'S HIGHSCORES
2700 IF T=1 THEN 2799

2710 OPEN1,DD,1,"@0:GREATESTCRAWL128,S"
2720 PRINT#1,"CRAWL128"
2730 FOR X=0 TO 4
2740  PRINT#1,CHR$(34)+HS$(0,X)
2750  PRINT#1,MID$(STR$(HS%(0,X)),2)
2760 NEXT
2770 CLOSE1

2799 RETURN

##########################
# CLEAR BOTTOM TEXT AREA #
##########################
2800 C1=VR(0)+VR(2):BT%=0
2810 ::VMF C1,0,3200
2890 RETURN



################
# INSTRUCTIONS #
################

9000 ::VMF AP,0,VR(3)
9005 C2=AP+560
9010 FOR TD = 6 TO 17
9015  C3=C2+(TD-5)*560
9020  GOSUB 975
9030 NEXT

9050 GOSUB 2800:TX$="PRESS KEY TO CONTINUE":GOSUB 800


9100 POKE 208,0:GETKEY I$
9199 GOTO 110


####################
# ACKNOWLEDGEMENTS #
####################
9200 ::VMF AP,0,VR(3)
9205 C2=AP+563
9210 FOR TD = 18 TO 29
9215  C3=C2+(TD-17)*560
9220  GOSUB 975
9230 NEXT

9235 GOSUB 2800:TX$="PRESS KEY TO CONTINUE":GOSUB 800
9240 POKE 208,0:GETKEY I$:GOSUB 2800

9250 ::VMF AP,0,VR(3)
9255 C2=AP+563
9260 FOR TD = 30 TO 32
9265  C3=C2+(TD-26)*560
9270  GOSUB 975
9280 NEXT

9282 TX$="PRESS KEY TO CONTINUE":GOSUB 800
9285 POKE 208,0:GETKEY I$:GOSUB 2800

9290 ::VMF AP,0,VR(3)
9295 C2=AP+563
9300 FOR TD = 33 TO 42
9305  C3=C2+(TD-31)*560
9310  GOSUB 975
9320 NEXT

9322 TX$="PRESS KEY TO CONTINUE":GOSUB 800
9325 POKE 208,0:GETKEY I$:GOSUB 2800

9399 GOTO 110

############
# SETTINGS #
############

9400 GOSUB 2800
9402 ::VMF AP,0,VR(3)

9405 C2=AP+560+9
9410 FOR TD = 43 TO 52
9415  C3=C2+(TD-42)*560:C4=C3
9420  GOSUB 975:IF TD>49 THEN 9435

9425  GOSUB 9590
9435 NEXT

9440 TX$="CURSOR KEYS TO MOVE":GOSUB 800
9445 TX$="RETURN KEY TO SELECT":GOSUB 800
9446 TX$=" KEY TO CANCEL SELECTION":GOSUB 800

#    L%: ANIMATION ARRAY FOR SELECTOR
#    MI%: CURRENT MENU ITEM (WHERE SELECTOR IS AT)
9450 L%=6:MI%=0
9455 DO

#     SM IS THE TIMER FOR THE ANIMATION OF THE SELECTOR
9460  SM=TI

#     DRAW SELECTOR
#     C1: SOURCE ADDRESS (START PIXEL IN CHARSET)
#     C3: TARGET ADDRESS (START PIXEL ON SCREEN)
9465  C1=CA+MI%(L%):C3=AP+1123+(MI%)*560
9470  ::VMC C1,C3,3,6,EI%

9475  GET I$

#     MOVE DOWN
9480  IF I$=KB$(9) THEN MI%=MI%+1:IFMI%>9THENMI%=0:GOTO 9500

#     MOVE UP
9485  IF I$=KB$(8) THEN MI%=MI%-1:IFMI%<0THENMI%=9:GOTO 9500

#     ACCEPT INPUT
9490  IF I$=CHR$(13) THEN 9510

#     ADVANCE ANIMATION FRAME 6 TIMES A SECOND
9495  IF TI-SM<10 THEN 9475

#     REMOVE SELECTOR FROM PREVIOUS POSITION
9500  ::VMC CA,C3,3,6,EI%
#     UPDATE SELECTOR ANIMATION FRAME
9505  L%=L%+1:IFL%>9THENL%=6

9510 LOOP UNTIL I$=CHR$(13)


#     SHOW ANIMATED SELECTOR IN PLACE OF CURRENTLY MAPPED KEY
#     GET INPUT OF NEW KEY
#     DO VALIDITY CHECK (NO ENTER, FOR EXAMPLE)
#     SAVE NEW KEY
#     WRITE NEW KEY

9514 C4=C3+6
9515 IF MI%>=8 THEN 9585

#     REMOVE SELECTOR FROM CURRENT POSITION
9520  ::VMC CA,C3,3,6,EI%
#     DRAW SELECTOR TO NEW POSITION
9524  ::VMC C1,C4+51,3,6,EI%

9525  TD=MI%+42

9530  GETKEY I$
9535  IF I$="" THEN GOSUB 9590:GOTO 9455
9540  KB$(MI%)=I$:GOSUB 9590:GOTO 9455
9545  IF ASC(I$)=13 THEN PRINT CHR$(7):GOTO 9530


#    RESET KEY MAPPING TO DEFAULT
9585 IF MI%=8 THEN GOSUB 11000:GOTO 9400

#    LEAVE SETTINGS SCREEN
9589 IF MI%=9 THEN GOTO 110

#     DRAW THE MAPPED KEY
9590  C3=C4+51:C1=CA+FC%(ASC(KB$(TD-42))-32)
9592  ::VMC C1,C3,3,6,EI%
9599  RETURN


########
# EXIT #
########

9600 S2=TI-S2
9615 PRINT "TOOK "S2 " JIFFIES"

9620 POKE 58,255
9630 CLR
9640 RST3
9650 GRAPHIC5
9660 PRINT ""
9670 PRINT "BYE!"

9698 SLOW
9699 END


##############################################
# VRAM memory MAP
# 0-7999: double buffer 0 attribute ram
# 8000-15999: double buffer 1 attribute ram
# 16000-40000: "compressed" tiles AND FONT
# 
# 49535-65535: Screen RAM. statically configured for
#              - lowres in the 3d view
#              - maybe something else for text display regions

10000 CT$="########################################"
#10001 GRAPHIC5:COLOR 5,2:PRINT""CHR$(14);:COLOR5,2
#10002 PRINT USING "="+CT$+CT$;"RAWL PERATING YSTEM V0.99"
#10003 PRINT"-NIT: ";

10010 GRAPHIC0:BANK 0

10020 DEF FN PA(ZZ)=7*ZZ+1
10021 DEF FN CL(ZZ)=ZZ*16+ZZ
10022 DEF FN MV(ZZ)=ZZ-48
10023 DEF FN MP(ZZ)=PP%(0)+V%(PF%(0),ZZ)

#     POSITION-DELTA: USED FOR ENEMIES TO CALCULATE NEW MOVEMENT VECTOR
#                     MANHATTAN DISTANCE
#                     PARAMETER: IGNORED, AS 4 ARE REQUIRED
#                                PX%/PY%: PLAYER COORDINATES
#                                GX%/GY%: GHOST COORDINATES
#                                THE COORDINATES ARE COORDINATED BY PX/PY FUNCTIONS (BELOW)
10024 DEF FN PD(ZZ)=ABS(PX%-GX%)+ABS(PY%-GY%)

#     GET X-COORDINATE FOR MANHATTAN-DISTANCE CALC
10025 DEF FN PX(ZZ)=INT(ZZ)-INT(INT(ZZ)/W%)*W%

#     GET Y-COORDINATE FOR MANHATTAN-DISTANCE CALC
10026 DEF FN PY(ZZ)=INT(ABS(ZZ/W%))

#     GET MAP-POSITION RELATIVE TO GHOST.
#         EN%=GHOST-ID, ZZ:0=FORWARD/RIGHT, 1=BACKWARD/LEFT
10027 DEF FN PG(ZZ)=PP%(EN%)+VD%(PF%(EN%)+PF%(EN%)+PF%(EN%)+PF%(EN%)+ZZ)

#     PEEK WORD-SIZED VALUE
10029 DEF FN PW(ZZ)=PEEK(ZZ)+PEEK(ZZ+1)*256

10030 DEF FN M(ZZ)=M%(PP%(0)+V%(PF%(0),ZZ))
10031 DEF FN FD(ZZ)=INT(PF%(EN%)+ZZ+4)-INT(INT(PF%(EN%)+ZZ+4)/INT(4))*INT(4)
10032 DEF FN PP(ZZ)=PP%(EN%)+P%(PF%(EN%)+PF%(EN%)+ZZ)
10033 DEF FN TX(ZZ)=ASC(MID$(TX$,ZZ,1))-32

#     CALCULATE BOTTOM-TEXT POSITION OF NEXT LINE TO PRINT
10034 DEF FN BT(ZZ)=VR(4)+ZZ*6*EI%

#     COORDINATE OF CHARACTER OF MENU ITEMS
10035 DEF FN MI(ZZ)=ASC(MID$(MI$(TD),ZZ,1))-32

10039 DD=PEEK(186)
10040 BE=FNPW(4624)

10041 PK(0,0)=DEC("0E14"):PK(2,0)=56
10042 PK(0,1)=DEC("0E17"):PK(2,1)=229
10043 PK(0,2)=DEC("0E1B"):PK(2,2)=176
10044 PK(0,3)=DEC("0E1D"):PK(2,3)=198
10045 PK(0,4)=DEC("0E25"):PK(2,4)=56
10046 PK(0,5)=DEC("0E26"):PK(2,5)=229
10047 PK(0,6)=DEC("0E2A"):PK(2,6)=176
10048 PK(0,7)=DEC("0E2C"):PK(2,7)=198

10050 BLOAD"VDCBASIC2D.0AC6",B0,U(DD):SYSDEC("AC6")

10051 X=RGD(255)
10052 IF X=0 THEN PRINT "ONLY 16 KB VRAM DETECTED.":PRINT "SORRY, THIS REQUIRES 64 KB VRAM. EXITING.":SLOW:END
10053 PRINT "VRAM CHECK: OK. 64 KB VRAM FOUND"


10055 FOR X=0TO7:PK(1,X)=PEEK(PK(0,X)):NEXT


10057 PRINT"BANK 0 END:"BE
10058 PRINT"BANK 1 END:"VE

# VR(3)=START OF LOWER TEXT AREA
10059 VR(0)=65535-160*120:VR(1)=9600:VR(2)=16000:VR(3)=8000:VR(4)=VR(0)+VR(2)+160:BT%=0
10060 AX=0:AP(0)=0:AP(1)=9600:AP=AP(AX)
10065 ::DISPVR(0)
10066 ::ATTR AP

10070 ::RGW 0,127
10071 ::RGW4,159
#     120 SCREEN-ROWS (2 SCANLINES PER ROW)
10072 ::RGW6,120
# RGW7,140
10073 ::RGW7,133

#     2 SCANLINES PER ROW
10074 ::RGW9,1

10080 ::RGO 25,128:REM BITMAP MODE ON
10090 ::RGO 28,24:REM 64K VRAM
10100 ::RGW 36,0
10110 ::RGW DEC("1A"),DEC("FF")


############################
# SCREEN SETUP
############################
#     16K SCREEN-RAM IS FILLED WITH BG-COLOR LEFT, FG-COLOR RIGHT (TOP 100 SCANLINES)
#      3,2K SCREEN-RAM IS FILLED WITH 0 (BOTTOM 20 SCANLINES)
10120 ::VMF VR(0),15,VR(2)
10124 C1=VR(0)+VR(2)
10125 ::VMF C1,0,3200

#     8000 BYTES ATTRIBUTE RAM ARE FILLED WITH ZERO (LOWRES EMPTY)
#     1600 BYTES ATTRIBUTE RAM ARE SET TO FG/BG COLOR
10130 ::VMF AP,0,VR(3):REM CLEAR ATTRIBUTE RAM
10134 C1=AP+8000
10135 ::VMF C1,DEC("1F"),1600

#     TITLEPIC AREA
10137 TA=AP+VR(1)


#     CALCULATE TEXT-CHARACTER OFFSET POSITIONS
10140 FOR X=0TO95:FC%(X)=X*18:NEXT


############################
# LOAD RESOURCES INTO VRAM
############################
# DA:WALLSET ADDRESS
# CA:CHARSET ADDRESS
# TA:TITLEPIC ADDRESS (INVISIBLE VRAM START)

# LOAD TITLE PIC TO END OF RAM, 3KB BEFORE END.
10141 PRINT"LOADING TITLE...";:BLOAD"TITLE.VDC",U(DD),B0,P(65280-3072)
10142 FT=FNPW(174)-(65280-3072):PRINT FT" BYTES DONE":CA=AP+VR(1)+VR(1)
10143 PRINT "COPYING TITLE TO VRAM ADDRESS "TA"-"(TA+FT)
10144 ::RTV 65280-3072,TA,FT
10145 ::VMC TA,AP+2+80*32,73,32,EI%

10146 PRINT"LOADING FONT...";:BLOAD"FONT2.VDC",U(DD),B0,P(BE)
10147 FL=FNPW(174)-BE:PRINT FL" BYTES DONE":DA=CA+FL
10148 PRINT "COPYING FONTS TO VRAM ADDRESS "CA"-"(CA+FL)
10149 ::RTV BE,CA,FL


10150 TX$="LOADING WALLS...":GOSUB 800
10155 FI$="WALLS.VDC"
10160 ?"LOADING "FI$"...";:BLOAD (FI$),B0,P(BE),U(DD)
10170 FL=FNPW(174)-BE:PRINT FL" BYTES DONE":GA(0)=DA+FL

10180 DC=PEEK(BE):PRINT DC " ENTRIES"
10185 DIM DM%(DC-1,4)
10190 D=FNPA(DC)
10200 FL=FL-D

#     COPY WALLSET FROM RAM TO VRAM
#     CA:CHARSET ADDRESS
10215 C1=BE+D
10219 PRINT "COPYING WALLSET TO VRAM ADDRESS "DA" TO "GA(0)
10220 ::RTV C1,DA,FL

#     WRITE WALLSET-METADATA TO ARRAY
#     0,1:OFFSET OF SOURCE IN VRAM
#       2:WIDTH IN BYTES (1 BYTE = 2 PIXELS)
#       3:HEIGHT IN SCANLINES
#       4:SIZE OF TILE (LENGTH IN BYTES)
#     5,6:POSITION OF TILE ON SCREEN
10230 FOR FI=0 TO DC-1
10240  PA=BE+FNPA(FI)
10250  DM%(FI,0)=FNPW(PA)
10260  DM%(FI,1)=PEEK(PA+2)
10270  DM%(FI,2)=PEEK(PA+3)
10280  DM%(FI,3)=FNPW(PA+4)
10290  DM%(FI,4)=PEEK(PA+6)+406
10310 NEXT

#10329 GA(0)=9600

10320 TX$="LOADING RED...":GOSUB 800

10330 PRINT"LOADING RED...";:BLOAD"RED.VDC",U(DD),B0,P(BE)
10332 FL=FNPW(174)-BE:PRINT FL" BYTES DONE":GA(1)=GA(0)+FL
10333 PRINT "COPYING RED TO VRAM ADDRESS "GA(0)
# 29 IS THE OFFSET TO THE ACTUAL PIXEL DATA
10334 ::RTV BE+29,GA(0),FL

10340 FOR X=0 TO 3
10342  PA=BE+FNPA(X)
10344  GM(0,X,0)=GA(0)+FNPW(PA)
10346  GM(0,X,1)=PEEK(PA+2)
10348  GM(0,X,2)=PEEK(PA+3)
10350  GM(0,X,3)=FNPW(PA+4)
10352  GM(0,X,4)=36+EI%*53
10354 NEXT

10355 TX$="LOADING RED1...":GOSUB 800

10360 PRINT"LOADING RED1...";:BLOAD"RED1.VDC",U(DD),B0,P(BE)
10362 FL=FNPW(174)-BE:PRINT FL" BYTES DONE"::GA(2)=GA(1)+FL
10363 PRINT "COPYING RED1 TO VRAM ADDRESS "GA(1)
# 29 IS THE OFFSET TO THE ACTUAL PIXEL DATA
10364 ::RTV BE+29,GA(1),FL

10370 FOR X=0 TO 3
10372  PA=BE+FNPA(X)
10374  GM(1,X,0)=GA(1)+FNPW(PA)
10376  GM(1,X,1)=PEEK(PA+2)
10378  GM(1,X,2)=PEEK(PA+3)
10380  GM(1,X,3)=FNPW(PA+4)
10382  GM(1,X,4)=31+EI%*44
10384 NEXT


# GHOST COORDINATES. USED FOR SHOWING HITS ON GHOST IN COMBAT
10385 GC%(1)=5561:GC%(2)=4354:GC%(3)=3637


10390 MA=GA(2):PRINT "MAP ADDRESS IN VRAM STARTING AT "MA


10395 PRINT "SCREEN-RAM STARTING AT"VR(0)

# TD: TEXT-DELTA (OFFSET IN PIXELS TO TEXT-START)
10410 TX$="LOADING TEXTS...":GOSUB 800

# MAIN MENU TEXT
10500 MI$(0)="PLAY!":MI$(1)="INSTRUCTIONS":MI$(2)="HIGHSCORES":MI$(3)="SETTINGS"
10501 MI$(4)="ACKNOWLEDGEMENTS":MI$(5)="EXIT"
10502 

# INSTRUCTIONS TEXT (26 CHARS MAX PER LINE, 16 LINES MAX)
#             XXXXXXXXXXXXXXXXXXXXXXXXXX
10510 MI$(6)="COLLECT ALL THE GEMS"
10511 MI$(7)="DON'T GET KILLED BY THE
10512 MI$(8)="GHOST. PRESS F TO ATTACK."
10513 MI$(9)="ATTACK RANGE IS 3 TILES."
10514 MI$(10)="THE GHOST CAN ONLY ATTACK
10515 MI$(11)="ADJACENT TILES."
10516 MI$(12)="HE MOVES AS FAST AS YOU,"
10517 MI$(13)="BUT CAN'T STRAFE."
10518 MI$(14)="ONCE YOU HAVE ALL GEMS
10519 MI$(15)="GO TO THE EXIT."
10520 MI$(16)="KEYS WASDQE TO MOVE."
10521 MI$(17)="M DISPLAYS THE MAP."

10530 MI$(18)="SPECIAL THANKS TO ALL WHO"
10531 MI$(19)="KEEP THE VDC-CHIP ALIVE":MI$(20)=" "
10533 MI$(21)=" TOKRA, MAC BACON"
10534 MI$(22)=" ELYSIUM, OZIPHANTOM"
10535 MI$(23)=" XAHMOL, VICE TEAM 3.9"
10536 MI$(24)=" WILLYMANILLY"
10537 MI$(25)=" VINTAGE COMPUTING"
10538 MI$(26)="   CARINTHIA"
10539 MI$(27)=" "
10540 MI$(28)="AND TO MICHAEL BROUGH"
10541 MI$(29)=" FOR BEING AN INSPIRATION"

10542 MI$(30)=" "
10543 MI$(31)="DEDICATED TO"
10544 MI$(32)=" JULIA, BEN, AND MARTINA"

10546 MI$(33)="CRAWL 128"
10547 MI$(34)=" "
10548 MI$(35)="BROUGHT TO YOU BY"
10549 MI$(36)="GOODWELL
10550 MI$(37)="AND"
10551 MI$(38)="THE 8-BIT THEORY"
10552 MI$(39)=" "
10553 MI$(40)="NEARLY A SUBMISSION TO"
10554 MI$(41)="THE DUNGEON CRAWLER
10555 MI$(42)=" GAME JAM 2025"

10560 MI$(43)="MOVE FORWARD:"
10561 MI$(44)="STRAFE LEFT:"
10562 MI$(45)="MOVE BACKWARD:"
10563 MI$(46)="STRAFE RIGHT:"
10564 MI$(47)="TURN LEFT:"
10565 MI$(48)="TURN RIGHT:"
10566 MI$(49)="ATTACK:"
10567 MI$(50)="SHOW MAP:"
10568 MI$(51)="BACK TO DEFAULTS"
10569 MI$(52)="DONE"

10570 GOSUB 11000

10590 TX$="LOADING HIGHSCORES...":GOSUB 800

10600 HS$(0,0)="AT 1":HS%(0,0)=9999
10601 HS$(0,1)="AT 2":HS%(0,1)=9999
10602 HS$(0,2)="AT 3":HS%(0,2)=9999
10603 HS$(0,3)="AT 4":HS%(0,3)=9999
10604 HS$(0,4)="AT 5":HS%(0,4)=9999

10605 HS$(1,0)="TD 1":HS%(1,0)=9999
10606 HS$(1,1)="TD 2":HS%(1,1)=9999
10607 HS$(1,2)="TD 3":HS%(1,2)=9999
10608 HS$(1,3)="TD 4":HS%(1,3)=9999
10609 HS$(1,4)="TD 5":HS%(1,4)=9999

10610 OPEN1,DD,0,"GREATESTCRAWL128,S"
10611 INPUT#1,TX$:IF TX$<>"CRAWL128" THEN PRINT"ILLEGAL HIGHSCORES":GOTO 10980
10612 FOR X=0TO4
10614  INPUT#1,HS$(0,X)
10616  INPUT#1,HS%(0,X)
10618 NEXT
10620 CLOSE1

10980 BANK 15
10990 RETURN


# DEFAULT KEYBOARD MAPPING
# WE DO THIS IN A DEDICATED SUB, SO WE CAN ALWAYS RESET
11000 KB$(0)="W"
11002 KB$(1)="A"
11004 KB$(2)="S"
11006 KB$(3)="D"
11008 KB$(4)="Q"
11010 KB$(5)="E"
11012 KB$(6)="F"
11014 KB$(7)="M"

11015 KB$(8)=CHR$(145)
11016 KB$(9)=CHR$(17)

11019 RETURN

# MAP DATA
# ODD NUMBERS ARE NOT-WALKABLE
# 1 - REGULAR WALL
# 3 - WALL OF MONSTER DEN
# 5 - DOOR OF MONSTER DEN
#  IT'S ABOUT THE LOWEST BIT OF THE ASCII CODE, NOT THE HEX-REP. SO, A IS ODD (65)

# EVEN NUMBERS ARE
# 0 - EMPTY
# 2 - COIN
# 4 - POWER COIN
# 6 - SPAWN POINT
# 8 - TELEPORT TO SAME CHAR
# SAME AS ABOVE.B IS NOT HEX-B BUT SOME EVEN ASCII CODE
# B - SPAWNPOINT OF GHOST 1 (20)
# D - SPAWNPOINT OF GHOST 2 (22)
# F - SPAWNPOINT OF GHOST 3 (24)
# H - SPAWNPOINT OF GHOST 4 (26)
# X - DISABLED EXIT (VALUE IS 40)
# Z - ENABLED EXIT (VALUE IS 42)


#60000 DATA 1,1,1,1,1,1,1,1
#60001 DATA 1,0,0,0,0,0,0,1
#60002 DATA 1,2,1,0,X,1,1,1
#60003 DATA 1,2,0,0,1,0,1,1
#60004 DATA 1,6,1,0,B,0,1,1
#60005 DATA 1,0,0,0,1,0,1,1
#60006 DATA 1,0,0,0,0,0,0,1
#60007 DATA 1,1,1,1,1,1,1,1


60000 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
60001 DATA 1,2,2,2,2,1,2,2,2,X,2,2,2,2,1,2,2,2,2,1
60002 DATA 1,2,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1
60003 DATA 1,2,1,2,2,2,2,2,B,0,0,0,2,2,2,2,2,1,4,1
60004 DATA 1,2,1,2,1,1,2,1,1,1,1,1,1,2,1,1,2,1,2,1
60005 DATA 1,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,1
60006 DATA 1,2,1,2,1,1,2,1,1,1,1,1,1,2,1,1,2,1,2,1
60007 DATA 1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1
60008 DATA 1,2,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1
60009 DATA 1,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,6,1
60010 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

#60100 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#60101 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1
#60102 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60103 DATA 1,4,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,4,1
#60104 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60105 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1
#60106 DATA 1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1
#60107 DATA 1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1
#60108 DATA 1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1
#60109 DATA 1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1
#60110 DATA 1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1
#60111 DATA 1,1,1,1,1,1,2,1,1,0,0,0,0,6,0,0,0,0,0,1,1,2,1,1,1,1,1,1
#60112 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,0,0,1,1,1,0,1,1,2,1,1,1,1,1,1
#60113 DATA 1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1
#60114 DATA 0,0,8,0,0,0,2,0,0,0,1,0,7,9,A,C,0,1,0,0,0,2,0,0,0,8,0,0
#60115 DATA 1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1
#60116 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60117 DATA 1,1,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,1,1,1,1
#60118 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60119 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60120 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1
#60121 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60122 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60123 DATA 1,4,2,2,1,1,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,1,1,2,2,4,1
#60124 DATA 1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1
#60125 DATA 1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1
#60126 DATA 1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1
#60127 DATA 1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1
#60128 DATA 1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1
#60129 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1
#60130 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


#RL%()
62080 DATA 1,3,8, 2,5,12, 6,9,15, 7,11,19, 13,16,0, 14,18,0

#GV%()
62090 DATA 2,1,0,3, 3,2,1,0, 0,3,2,1, 1,0,3,2

