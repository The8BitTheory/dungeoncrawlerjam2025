#RetroDevStudio.MetaData.BASIC:7169,BASIC V7.0 VDC,uppercase,10,10
#####
# TODO
# - COMBAT
# - MONSTER MOVEMENT
# - MULTIPLE MAPS
# - CHICKEN
# - HIGHSCORE (STEPS TAKEN, MONSTERS KILLED)
# - SCROLLING TEXT DISPLAY ON BOTTOM
# 


0 REM ** FI G,X,Y
1 PRINT "INSERT DISK AND PRESS KEY TO CONTINUE":GETKEY I$

30 GRAPHIC0:GOSUB 10000

40 REM CL=CHECKLIST:RL=RENDERLIST:M=MAP:VL=VIEWLIST:TL%() TELEPORT LOCATIONS

# GS%():GAMESTATE
#       1=COINS LEFT TO COLLECT

45 TL=0:W=8:H=8

# PH%:PLAYER HEALTH. 0 IS PLAYER, 1-4 ARE GHOSTS
# PS%:PLAYER SPAWNPOINT
# PP%:PLAYER POSITION
# PF%:PLAYER FACING DIRECTION
# EC%:ENEMY CHECK LIST (CONTAINS VALUES 4,10,17)
50 DIM RL%(5,2),M%(W*H-1),V%(3,19),P%(7),GS%(1),TL%(1),MP%(2),PP%(4),PS%(4),FD%(3),PF%(4),RQ%(8),PH%(4)
51 DIM EC%(2)

#  EACH CREATURE HAS 3 HEALTH (INCLUDING PLAYER)
#  BUT PLAYER HAS RANGED ATTACK, ENEMIES ONLY HAVE MELEE ATTACK
52 FOR X=0TO4:PH%(X)=3:NEXT


#FD%() FACING DIRECTION COMPASS. 78,69,83,87 - 32
55 FD%(0)=46*18:FD%(1)=37*18:FD%(2)=51*18:FD%(3)=55*18
#56 MP%(0)=56:MP%(1)=31:MP%(2)=MP%(0)*MP%(1)
# EC$ CONTAINS THE IDS OF MONSTERS TO CHECK (WITH INSTR)
# MP%(0):WIDTH/2
# MP%(1):HEIGHT
56 MP%(0)=W/2:MP%(1)=H:MP%(2)=MP%(0)*MP%(1):EC%(0)=4:EC%(1)=10:EC%(2)=17:EC$=CHR$(7)+CHR$(9)+CHR$(17)+CHR$(19)

57 TX$="PREPARING YOUR DUNGEON...":TD=880:GOSUB 800

#  MAP DATA
60 GS%(1)=0:REM FAST

#  CLEAR VRAM OF MAP
61 ::VMF MA,0,MP%(2)
62 FAST
63 FOR X=0TOMP%(0)*2*MP%(1)-1:REM 28*MP%(1)-1:REM 11*20-1
64  READ MV$
65  IF MV$="2" THEN GS%(1)=GS%(1)+1:GOTO75
66  IF MV$="6" THEN PP%(0)=X:PS%(0)=X:GOTO75
67  IF MV$="8" THEN TL%(TL)=X:TL=TL+1:GOTO75

68  IF MV$="7" THEN PP%(1)=X:PS%(1)=X:GOTO75
69  IF MV$="9" THEN PP%(2)=X:PS%(2)=X:GOTO75
70  IF MV$="A" THEN PP%(3)=X:PS%(3)=X:GOTO75
71  IF MV$="C" THEN PP%(4)=X:PS%(4)=X:GOTO75

72  IF MV$="X" THEN EX%=X

75  MV=FNMV(ASC(MV$))
76  M%(X)=MV:IF (MVAND1)=1 THEN MV=FNCL(1):ELSEMV=255
77  C1=MA+X+X
78  ::VMF C1,MV,2
79 NEXT
80 SLOW



83 IF PP%(0)=0 THEN PRINT "NO STARTPOINT SET ON MAP":GRAPHIC0:END

#  NAVIGATION POSITION UPDATE DATA
84 FOR X=0TO7:READ MV:P%(X)=MV:NEXT

#  FACING NORTH
85 L=-1:R=-L:F=-W:B=-F:D=0:GOSUB 90
#  FACING EAST
86 L=-W:R=-L:F=1:B=-F:D=1:GOSUB 90
#  FACING SOUTH
87 L=1:R=-1:F=W:B=-F:D=2:GOSUB 90
#  FACING WEST
88 L=W:R=-L:F=-1:B=-F:D=3:GOSUB 90

89 GOTO 100


#  DIRECTION MAPPING COORDINATES
90 V%(D,1)=L:V%(D,2)=R
91 V%(D,3)=L+F:V%(D,4)=F:V%(D,5)=R+F
92 V%(D,6)=V%(D,3):V%(D,7)=V%(D,5)
93 V%(D,8)=L+F+F:V%(D,9)=V%(D,8):V%(D,10)=F+F:V%(D,11)=F+F+R:V%(D,12)=V%(D,11)
94 V%(D,13)=F+F+L:V%(D,14)=F+F+R
95 V%(D,15)=L+F+F+F:V%(D,16)=V%(D,15):V%(D,17)=F+F+F:V%(D,18)=F+F+F+R:V%(D,19)=V%(D,18)
96 RETURN


# BUILD ARRAY FOR RENDERLIST
100 FOR X=0TO5:FORY=0TO2:READMV:RL%(X,Y)=MV:NEXT:NEXT


110 TD$="WWEWWEWWQWWQWWQWWWWWQAAAAAEAAWWWWWQWWWQ"

#   WRITE FACING DIRECTION
220 GOSUB 610

#   WRITE NR OF COINS LEFT TO COLLECT
225 GOSUB 602

#   RENDER INITIAL VIEW
230 PF%(0)=0:GOSUB 340:TX=1:S2=TI

240 DO
241  SLOW
#242  I$=MID$(TD$,TX,1):TX=TX+1
242  GETKEY I$
243  I=ASC(I$)
244  FAST

#    RQ%: IF RENDER-QUEUE SHOULD BE USED FOR BACKWARDS RENDERING (FORWARD AND LOOK LEFT/RIGHT)
245  RQ%=0

#    LOOK LEFT/RIGHT
250  IF I$="Q" THEN RQ%=-1:TU%=-1:PF%(0)=PF%(0)-1:IF PF%(0)<0 THEN PF%(0)=3:GOTO300
255  IF I$="E" THEN RQ%=-1:TU%=-1:PF%(0)=PF%(0)+1:IF PF%(0)>3 THEN PF%(0)=0:GOTO300

#    MOVE FORWARD/BACKWARD
260  IF I$="W" THEN RQ%=-1:T=FNPP(0):GOTO 520
265  IF I$="S" THEN T=FNPP(1):GOTO 520

#    STRAFE LEFT/RIGHT
270  IF I$="A" THEN T2=PF%(0):PF%(0)=FNFD(3):T=FNPP(0):PF%(0)=T2:GOTO 520
275  IF I$="D" THEN T2=PF%(0):PF%(0)=FNFD(5):T=FNPP(0):PF%(0)=T2:GOTO 520

#    DISPLAY MAP
280  IF I$="M" THEN GOSUB 1000:GOTO320

#    FIGHT
285  IF I$="F" THEN GOSUB 1300:ON RD% GOTO 300, 305

#    EXIT
290  IF I$="X" THEN SLOW:GRAPHIC0:GOTO330


#    INPUT DONE AT THIS POINT. CALL RENDERING METHOD
300  GOSUB 340

#    TEXT UPDATE FLAG. CHECK IF TEXT ON TOP NEEDS UPDATING
305  IF TU% THEN GOSUB 610

#    GHOST MOVEMENTS


320 LOOP UNTIL TX=LEN(TD$)

330 S2=TI-S2:PRINT "TOOK "S2 " JIFFIES":END

#1175 UNCOMPILED WITH INTEGERS
#1080 UNCOMPILED WITH REDUCED NR OF PARAMETERS
#1125 UNCOMPILED WITH AND1 FOR MOVEMENT CHECK
#1071 UNCOMPILED WITH GOTO300 FOR INPUT CHECK
#1024 UNCOMPILED WITH S REMOVED FROM RENDERING
#1021 REMOVED F% FROM TU RENDERING
#1274 JIFFIES AFTER A LOT OF NEW STUFF (INCLUDING RENDER-LIST FOR CORRECT MOTION)

#536 COMPILED WITH INTEGERS
#307 COMPILED WITH INTEGERS

#1186

340 C1=AP+400

#   TILE-RENDER ANALYSIS
350 ::VMF C1,0,7600

#   HERE-LEFT AND RIGHT
360 GX=2

362 IF I$="A" THEN RL=0:GOSUB 620:GOSUB 410:RL=1:GOSUB 620:GOTO 374
364 IF I$="D" THEN RL=1:GOSUB 620:GOSUB 410:RL=0:GOSUB 620:GOTO 374

#   FORWARD/BACKWARD
366 RL=0:GOSUB 620:RL=1:GOSUB 620:GOSUB410

370 IF RQ% THEN FORX=QX%-1TO0STEP-1:DV=RQ%(X):GOSUB630:NEXT:QX%=0


#   DISPLAY COINS TO COLLECT (IF THERE)
374 C1=CA+32*18

375 IF T4%<>2 THEN 380
376 C2=AP+80*80+40
377 ::VMC C1,C2,3,6,80:T4%=0

380 IF TA%<>2 THEN 385
381 C2=AP+80*64+40
382 ::VMC C1,C2,3,6,80:TA%=0


#   DISPLAY GHOST (IF THERE)

385 EN%=INSTR(EC$,CHR$(T4%)):IF EN%=0 THEN 390
386 C2=AP+80*72+35:C3=C1+EN%*18
387 ::VMC C3,C2,3,6,80:T4%=0

390 EN%=INSTR(EC$,CHR$(TA%)):IF EN%=0 THEN RETURN
392 C2=AP+80*60+35:C3=C1+EN%*18
394 ::VMC C3,C2,3,6,80:T4%=0


399 RETURN

#   HERE-CENTER
410 T4%=FNM(4):IF T4%=1 THEN DV=3:ON 1+ABS(RQ%)GOSUB630,640:RETURN

420 IF I$="A" THEN RL=2:GOSUB620:GOSUB470:RL=3:GOSUB620:GOTO 435
425 IF I$="D" THEN RL=3:GOSUB620:GOSUB470:RL=2:GOSUB620:GOTO 435

430 RL=2:GOSUB620:RL=3:GOSUB620:GOSUB470:REM GOTO NEAR-CENTER
435 RETURN

#   NEAR-CENTER
470 TA%=FNM(10):IF TA%=1 THEN DV=9:ON 1+ABS(RQ%)GOSUB630,640:RETURN

475 GX=1:IF I$="A" THEN RL=4:GOSUB620:RL=5:GOSUB620:GOTO 500
480 RL=5:GOSUB620:RL=4:GOSUB620

#   FAR CENTER
500 IF FNM(17)=1 THEN DV=16:ON 1+ABS(RQ%)GOSUB630,640

510 RETURN

######################
# MOVEMENT UPDATE
# INCLUDING TELEPORTERS, WALLS, ...
########################
520 V%=M%(T):IF (V% AND 1) THEN 320
522 PP%(0)=T

#   CHECK IF A COIN IS TO BE COLLECTED FROM HERE
523 IF M%(PP%(0))=2 THEN GOSUB 600

#   CHECK IF THIS IS A TELEPORT FIELD
524 IF V%=8 THEN PP%(0)=TL%(ABS(PP%(0)=TL%(0))):GOTO 530

#   CHECK IF EXIT
528 IF V%=40 THEN TX$="COLLECT ALL FOR EXIT":TD=1360:GOSUB800:GOTO530
529 IF V%=42 THEN GOSUB 1200

530 GOTO 290

#############################
#   UPDATE COINS LEFT TO COLLECT
#####
600 M%(PP%(0))=0:GS%(1)=GS%(1)-1
602 TX$=MID$(STR$(GS%(1))+" ",2)
603 FOR X=1 TO LEN(TX$)
604  C1=CA+FN TX(X)*18
605  C2=AP+15+3*(X-1)
606  ::VMC C1,C2,3,6,80
607 NEXT

608 IF GS%(1)<=0 THEN M%(EX%)=42:TX$="FIND THE EXIT!":TD=1360:GOSUB800

609 RETURN

#####################
# UPDATE COMPASS
####################


610 TU%=0
611 C1=CA+FD%(PF%(0)):C2=AP+3
612 ::VMC C1,C2,3,6,80
614 RETURN

#   CHECK VALUES TO RENDER
620 FOR G=0 TO GX
622  DV=RL%(RL,G):IF FNM(DV)=1 THEN DV=DV-1:ON 1+ABS(RQ%)GOSUB630,640:GOTO 626
624 NEXT
626 RETURN

#   RENDER FRAME
630 C1=DA+DM%(DV,0):C2=AP+DM%(DV,4):C3=DM%(DV,1):C4=DM%(DV,2)
632 ::VMC C1,C2,C3,C4,80
634 RETURN

#   QUEUE FRAME FOR RENDERING
640 RQ%(QX%)=DV:QX%=QX%+1:RETURN

#   WRITE TEXT
800 FOR X=1TOLEN(TX$):F=FN TX(X)
809  C1=CA+F*18:C2=VR(4)+3*(X-1)+TD
810  ::VMC C1,C2,3,6,80
820 NEXT
830 RETURN



###############
# DISPLAY LEVEL MAP
###############

1000 C1%=20*80+12:C2%=C1%-322

#    CREATE FRAME FOR MAP
1010 FOR X=0TO39
1020  C3%=C2%+X*80:C4%=FNCL(4)
1030  ::VMF C3%,C4%,60
1040 NEXT

#    DISPLAY MAP
1050 ::VMC MA,C1%,MP%(0),MP%(1),80

#    DISPLAY PLAYER POSITION
#    C2%=LINES OFFSET
#    C3%=COLS OFFSET
1100 C2%=PP%(0)/MP%(0)*2
1110 C3%=C2%*80
1115 C4%=PP%(0)-C2%*MP%(0)/2
1120 C1%=C1%+C3%+C4%+C4%
1125 CL%=0
1126 TZ=TI

1130 DO
1135  GET I$:IF LEN(I$)>0 THEN EXIT
1140  IF TI-TZ<30 THEN 1160
1143  CL%=ABS(CL%-1)
1145  C2%=FNCL(CL%*8)
1150  ::VMF C1%,C2%,2
1155  TZ=TI
1160 LOOP

1170 GOSUB340

1199 RETURN

################
# DISPLAY EXIT MESSAGE
################
1200 C1%=20*80+12:C2%=C1%-322

#    CREATE FRAME FOR MAP
1210 FOR X=0TO39
1220  C3%=C2%+X*80:C4%=FNCL(4)
1230  ::VMF C3%,C4%,60
1240 NEXT

#    DISPLAY TEXT
1250 TX$="YOU WIN!"


#   WRITE TEXT
1260 FOR X=1TOLEN(TX$):F=FN TX(X)
1270  C1=CA+F*18:C2%=C2%+3
1280  ::VMC C1,C2%,3,6,80
1290 NEXT

1298 GETKEY I$

1299 RETURN

##################
# FIGHT AND COMBAT
##################
# FIGHT IS SIMPLE
# - PLAYER CAN ATTACK RANGED, AS SOON AS ENEMY IS VISIBLE
# - ENEMY MOVES ONE FIELD PER ACTION
# - ONCE ENEMY IS NEXT TO PLAYER, EACH ACTION HITS.
# - PLAYER ACTION ALWAYS COMES FIRST
# - PLAYER HAS 3 HEALTH
# - MONSTERS?

# CHECK WHICH MONSTER WE ARE FACING (TRACK MAP IN FACING DIRECTION) (EC%())
# REDUCE HIT POINTS OF MONSTER
# IF MONSTER IS STILL ALIVE, REDUCE HIT POINTS OF PLAYER
# IF PLAYER IS STILL ALIVE, BACK TO INPUT CHECK

# EL%: ENEMY LOCATION (POTENTIAL LOCATION)
#     7,9,17,19 ARE THE MAP VALUES IF ENEMIES ARE PRESENT (IN EC$)
#     AND WE HAVE TO CHECK FNM(4), FNM(10) AND FNM(17)
# CX%:CHECK-INDEX OF TILES TO CHECK. TAKEN FROM EC%(). CAN BE 4,10,17
# EN%:ENEMY-ID
1300 EN%=0:CX%=0:RD%=2
1310 DO
1320  EL%=FNM(EC%(CX%))
1330  EN%=INSTR(EC$, CHR$(EL%))
1335  IF EN%>0 THEN PRINT "ENEMY "EN%" "(CX%+1)" AWAY AT "EC%(CX%):EXIT
1337  PRINT "NOTHING TO ATTACK AT "EC%(CX%)
1340  CX%=CX%+1
1350 LOOP UNTIL CX%>2
1355 IF CX%>2 THEN RETURN

# CALCULATE ATTACK DAMAGE
1400 PH%(EN%)=PH%(EN%)-1:PRINT "ENEMY "EN%" HIT FOR 1 POINT OF DAMAGE"
1410 IF PH%(EN%)>0 THEN RETURN

#    HANDLE ENEMY KNOCKOUT
1420 PRINT " ENEMY "EN%" GOES BACK TO SPAWN POINT"
1421 EP%=PP%(EN%):PRINT "  ENEMY POS WAS "EP%", PLAYER POS IS"PP%(0)
#    ENEMY LOCATION TO RESPAWN POINT, LAST LOCATION TO EMPTY
1439 PP%(EN%)=-1:M%(EP%)=0:REM M%(PS%(EN%))=EL%

#    REDRAW VIEW
1440 RD%=1

1999 RETURN

##############################################
# VRAM memory MAP
# 0-7999: double buffer 0 attribute ram
# 8000-15999: double buffer 1 attribute ram
# 16000-40000: "compressed" tiles AND FONT
# 
# 49535-65535: Screen RAM. statically configured for
#              - lowres in the 3d view
#              - maybe something else for text display regions

10000 REM GRAPHIC SETUP

10010 BANK 0

10020 DEF FN PA(ZZ)=7*ZZ+1
10021 DEF FN CL(ZZ)=ZZ*16+ZZ
10022 DEF FN MV(ZZ)=ZZ-48
10023 DEF FN MP(ZZ)=PP%(0)+V%(PF%(0),ZZ)
10025 DEF FN PW(ZZ)=PEEK(ZZ)+PEEK(ZZ+1)*256
10026 DEF FN M(ZZ)=M%(PP%(0)+V%(PF%(0),ZZ))
10027 DEF FN FD(ZZ)=INT(PF%(0)+ZZ+4)-INT(INT(PF%(0)+ZZ+4)/INT(4))*INT(4)
10028 DEF FN PP(ZZ)=PP%(0)+P%(PF%(0)+PF%(0)+ZZ)
10029 DEF FN TX(ZZ)=ASC(MID$(TX$,ZZ,1))-32

10030 DD=PEEK(186)
10040 BE=FNPW(4624)
10050 BLOAD"VDCBASIC2D.0AC6",B0,U(DD):SYSDEC("AC6")


10059 VR(0)=65535-160*120:VR(1)=9600:VR(2)=16000:VR(3)=8000:VR(4)=VR(0)+VR(2)
10060 AX=0:AP(0)=0:AP(1)=9600:AP=AP(AX)
10065 ::DISPVR(0)
10066 ::ATTR AP

10070 ::RGW 0,127
10071 ::RGW4,159
#     120 SCREEN-ROWS (2 SCANLINES PER ROW)
10072 ::RGW6,120
# RGW7,140
10073 ::RGW7,133

#     2 SCANLINES PER ROW
10074 ::RGW9,1

10080 ::RGO 25,128:REM BITMAP MODE ON
10090 ::RGO 28,24:REM 64K VRAM
10100 ::RGW 36,0
10110 ::RGW DEC("1A"),DEC("FF")


############################
# SCREEN SETUP
############################
#     16K SCREEN-RAM IS FILLED WITH BG-COLOR LEFT, FG-COLOR RIGHT (TOP 100 SCANLINES)
#      3,2K SCREEN-RAM IS FILLED WITH 0 (BOTTOM 20 SCANLINES)
10120 ::VMF VR(0),15,VR(2)
10124 C1=VR(0)+16000
10125 ::VMF C1,0,3200

#     8000 BYTES ATTRIBUTE RAM ARE FILLED WITH ZERO (LOWRES EMPTY)
#     1600 BYTES ATTRIBUTE RAM ARE SET TO FG/BG COLOR
10130 ::VMF AP,0,VR(3):REM CLEAR ATTRIBUTE RAM
10134 C1=AP+8000
10135 ::VMF C1,DEC("1F"),1600
10140 DA=AP+VR(2)


############################
# LOAD RESOURCES INTO VRAM
############################
10150 FI$="WALLS.VDC"
10160 ?"LOADING "FI$"...";:BLOAD (FI$),B0,P(BE)
10170 FL=FNPW(174)-BE:PRINT FL" BYTES DONE"

10180 DC=PEEK(BE):PRINT DC " ENTRIES"
10185 DIM DM%(DC-1,4)
10190 D=FNPA(DC)
10200 FL=FL-D

#10210 FAST

#33293 -> 10218 ILLEGAL QUANTITY ERROR:FIXED BY INTRODUCING C1 BELOW

#33305 ->       ILLEGAL QUANTITY ERROR
#33622 -> 

#     COPY WALLSET FROM RAM TO VRAM
10215 CA=DA+FL
10216 C1=BE+D
#10219 PRINT "COPYING WALLSET TO VRAM ADDRESS "DA" TO "CA
10220 ::RTV C1,DA,FL



#     WRITE WALLSET-METADATA TO ARRAY
#     0,1:OFFSET OF SOURCE IN VRAM
#       2:WIDTH IN BYTES (1 BYTE = 2 PIXELS)
#       3:HEIGHT IN SCANLINES
#       4:SIZE OF TILE (LENGTH IN BYTES)
#     5,6:POSITION OF TILE ON SCREEN
10230 FOR FI=0 TO DC-1
10240  PA=BE+FNPA(FI)
10250  DM%(FI,0)=FNPW(PA)
10260  DM%(FI,1)=PEEK(PA+2)
10270  DM%(FI,2)=PEEK(PA+3)
10280  DM%(FI,3)=FNPW(PA+4)
10290  DM%(FI,4)=PEEK(PA+6)+406
10310 NEXT


10311 PRINT"LOADING FONT...";:BLOAD"FONT2.VDC",U(DD),B0,P(BE)
10312 FL=FNPW(174)-BE:PRINT FL" BYTES DONE":MA=CA+FL
10313 PRINT "COPYING FONTS TO VRAM ADDRESS "CA
10314 ::RTV BE,CA,FL

10320 PRINT "MAP ADDRESS IN VRAM STARTING AT "MA
10325 PRINT "SCREEN-RAM STARTING AT"VR(0)

# TD: TEXT-DELTA (OFFSET IN PIXELS TO TEXT-START)
10400 TX$="GREETINGS, CRAWLER!":TD=330:GOSUB 800

10980 BANK 15
10990 RETURN

# MAP DATA
# ODD NUMBERS ARE NOT-WALKABLE
# 1 - REGULAR WALL
# 3 - WALL OF MONSTER DEN
# 5 - DOOR OF MONSTER DEN
# 7 - SPAWNPOINT OF GHOST 1
# 9 - SPAWNPOINT OF GHOST 2
#  IT'S ABOUT THE LOWEST BIT OF THE ASCII CODE, NOT THE HEX-REP. SO, A IS ODD (65)
# A - SPAWNPOINT OF GHOST 3 (VALUE IS 17)
# C - SPAWNPOINT OF GHOST 4 (VALUE IS 19)

# EVEN NUMBERS ARE
# 0 - EMPTY
# 2 - COIN
# 4 - POWER COIN
# 6 - SPAWN POINT
# 8 - TELEPORT TO A
# SAME AS ABOVE.B IS NOT HEX-B BUT SOME EVEN ASCII CODE
# B - TELEPORT TO 8
# X - DISABLED EXIT (VALUE IS 40)
# Z - ENABLED EXIT (VALUE IS 42)


60000 DATA 1,1,1,1,1,1,1,1
60001 DATA 1,2,2,2,2,2,2,1
60002 DATA 1,2,1,1,X,1,2,1
60003 DATA 1,2,2,1,0,1,2,1
60004 DATA 1,2,2,0,6,7,9,1
60005 DATA 1,2,1,1,1,1,2,1
60006 DATA 1,2,2,2,2,2,2,1
60007 DATA 1,1,1,1,1,1,1,1


#60000 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#60001 DATA 1,6,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,1
#60002 DATA 1,2,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1
#60003 DATA 1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1
#60004 DATA 1,2,1,2,1,1,2,1,1,0,0,1,1,2,1,1,2,1,2,1
#60005 DATA 1,2,2,2,2,2,2,1,0,0,0,0,1,2,2,2,2,2,2,1
#60006 DATA 1,2,1,2,1,1,2,1,1,1,1,1,1,2,1,1,2,1,2,1
#60007 DATA 1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1
#60008 DATA 1,2,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1
#60009 DATA 1,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,1
#60010 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

#60100 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#60101 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1
#60102 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60103 DATA 1,4,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,4,1
#60104 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60105 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1
#60106 DATA 1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1
#60107 DATA 1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1
#60108 DATA 1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1
#60109 DATA 1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1
#60110 DATA 1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1
#60111 DATA 1,1,1,1,1,1,2,1,1,0,0,0,0,6,0,0,0,0,0,1,1,2,1,1,1,1,1,1
#60112 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,0,0,1,1,1,0,1,1,2,1,1,1,1,1,1
#60113 DATA 1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1
#60114 DATA 0,0,8,0,0,0,2,0,0,0,1,0,7,9,A,C,0,1,0,0,0,2,0,0,0,8,0,0
#60115 DATA 1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1
#60116 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60117 DATA 1,1,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,1,1,1,1
#60118 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60119 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60120 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1
#60121 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60122 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60123 DATA 1,4,2,2,1,1,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,1,1,2,2,4,1
#60124 DATA 1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1
#60125 DATA 1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1
#60126 DATA 1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1
#60127 DATA 1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1
#60128 DATA 1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1
#60129 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1
#60130 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


62069 W=8

#62070 DATA -20,20,1,-1,20,-20,-1,1
#62070 DATA -28,28,1,-1,28,-28,-1,1
62070 DATA -8,8,1,-1,8,-8,-1,1

62080 DATA 1,3,8, 2,5,12, 6,9,15, 7,11,19, 13,16,0, 14,18,0
