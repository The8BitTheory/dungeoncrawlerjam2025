#RetroDevStudio.MetaData.BASIC:7169,BASIC V7.0 VDC,uppercase,10,10
#####
# TODO
# - RENDER MORE COIN POSITIONS (ALSO SMALLER IN DISTANCE)
# - RENDER MORE GHOST POSITIONS (SIMILAR TO COIN POSITIONS)
# - HIGHSCORE (STEPS TAKEN, MONSTERS KILLED)
# - CREDITS
# - KEY MAPPING


######
# DONE
# - COMBAT
# - MONSTER MOVEMENT
# - GHOST SPRITES (AT LEAST 1)
# - GHOSTS SPRITE FACE CORRECT DIRECTION
# - TEXT DISPLAY ON BOTTOM FOR BATTLE


0 REM ** FI G,X,Y,Z
1 PRINT "INSERT DISK AND PRESS KEY TO CONTINUE":GETKEY I$

20 POKE 58,128:CLR
25 VE=128*256
26 TL=0
27 W%=20:H%=11

30 DIM RL%(5,2),M%(W%*H%-1),V%(3,19),P%(7),GS%(1),TL%(1),MP%(2),PP%(4),PS%(4),FD%(3),PF%(4),RQ%(8),PH%(4)
31 DIM EC%(2),PD%(2),VD%(15),GI%(3),GV%(3,3),FC%(95),T%(19),MI$(50)

35 GRAPHIC0:GOSUB 10000

40 REM CL=CHECKLIST:RL=RENDERLIST:M=MAP:VL=VIEWLIST:TL%() TELEPORT LOCATIONS

# GS%():GAMESTATE
#       1=COINS LEFT TO COLLECT


#46 W%=8:H%=8

# PH%:PLAYER HEALTH. 0 IS PLAYER, 1-4 ARE GHOSTS
# PS%:PLAYER SPAWNPOINT
# PP%:PLAYER POSITION
# PF%:PLAYER FACING DIRECTION
# EC%:ENEMY CHECK LIST (CONTAINS VALUES 4,10,17)
# PD%:POSITION DELTAS (USED FOR TARGET VECTOR CALCULATION)
# GV%:GHOST-VIEW (USED TO SHOW CORRECT GHOST SPRITE FOR DIFFERENT ANGLES)
# FC%:FONT COORDINATES


#FD%() FACING DIRECTION COMPASS. 78,69,83,87 - 32
50 FD%(0)=46*18:FD%(1)=37*18:FD%(2)=51*18:FD%(3)=55*18
#56 MP%(0)=56:MP%(1)=31:MP%(2)=MP%(0)*MP%(1)
# MP%(0):WIDTH/2
# MP%(1):HEIGHT
55 MP%(0)=W%*2:MP%(1)=H%:MP%(2)=MP%(0)*MP%(1):EC%(0)=4:EC%(1)=10:EC%(2)=17

57 TX$="PREPARING YOUR DUNGEON...":GOSUB 800


#  MAP DATA

#  CLEAR VRAM OF MAP
60 ::VMF MA,0,MP%(2)

62 FAST:BANK1
63 FOR X=0TOMP%(0)/2*MP%(1)-1:REM 28*MP%(1)-1:REM 11*20-1
64  READ MV$
65  IF MV$="2" THEN GS%(0)=GS%(0)+1:GOTO75
66  IF MV$="6" THEN PS%(0)=X:GOTO75
67  IF MV$="8" THEN TL%(TL)=X:TL=TL+1:GOTO75

68  IF MV$="B" THEN PS%(1)=X:GOTO75
69  IF MV$="F" THEN PS%(2)=X:GOTO75
70  IF MV$="H" THEN PS%(3)=X:GOTO75
71  IF MV$="J" THEN PS%(4)=X:GOTO75

72  IF MV$="X" THEN EX%=X

75  MV=FNMV(ASC(MV$))
76  POKE VE+X,MV:IF (MVAND1)=1 THEN MV=FNCL(1):ELSEMV=255
77  C1=MA+X+X
78  ::VMF C1,MV,2
79 NEXT
80 BANK15:REM SLOW



83 IF PS%(0)=0 THEN PRINT "NO STARTPOINT SET ON MAP":GRAPHIC0:END

#  NAVIGATION POSITION UPDATE DATA
84 FOR X=0TO7:READ MV:P%(X)=MV:NEXT

#  FACING NORTH
85 L=-1:R=-L:F=-W%:B=-F:D=0:GOSUB 90
#  FACING EAST
86 L=-W%:R=-L:F=1:B=-F:D=1:GOSUB 90
#  FACING SOUTH
87 L=1:R=-1:F=W%:B=-F:D=2:GOSUB 90
#  FACING WEST
88 L=W%:R=-L:F=-1:B=-F:D=3:GOSUB 90

89 GOTO 100


#  DIRECTION MAPPING COORDINATES
90 V%(D,1)=L:V%(D,2)=R
91 V%(D,3)=L+F:V%(D,4)=F:V%(D,5)=R+F
92 V%(D,6)=V%(D,3):V%(D,7)=V%(D,5)
93 V%(D,8)=L+F+F:V%(D,9)=V%(D,8):V%(D,10)=F+F:V%(D,11)=F+F+R:V%(D,12)=V%(D,11)
94 V%(D,13)=F+F+L:V%(D,14)=F+F+R
95 V%(D,15)=L+F+F+F:V%(D,16)=V%(D,15):V%(D,17)=F+F+F:V%(D,18)=F+F+F+R:V%(D,19)=V%(D,18)
96 RETURN


# BUILD ARRAY FOR VECTOR TRACKING
100 FOR X=0TO15:READMV:VD%(X)=MV:NEXT

# BUILD ARRAY FOR RENDERLIST
102 FOR X=0TO5:FORY=0TO2:READMV:RL%(X,Y)=MV:NEXT:NEXT

# BUILD GHOST-VIEW ARRAY GV%() (X=PLAYER FACING DIRECTION, Y=GHOST FACING DIRECTION)
104 FOR X=0TO3:FORY=0TO3:READ MV:GV%(X,Y)=MV:NEXT:NEXT

# TIMEDEMO
#115 TD$="WWEWWEWWQWWQWWQWWWWWQAAAAAEAAWWWWWQWWWQ"

105 ::VMF AP,0,VR(3)
106 MI%(6)=15*18:MI%(7)=13*18:MI%(8)=60*18:MI%(9)=92*18

108 FOR X=0TO3
109  MI%(X)=AP+X*640+2880+(80-LEN(MI$(X))*3)/2
110 NEXT

# MAIN MENU
111 MI%=0
112 FOR TD=0TO3
114  GOSUB 970
116 NEXT

# RENDER INITIAL CURSOR
130 L%=6
132 DO

134  SM=TI

135  C1=CA+MI%(L%):C2=MI%(MI%)-6
140  ::VMC C1,C2,3,6,80

150  GET I$
152  IF I$="S" THEN MI%=MI%+1:IFMI%>3THENMI%=0:GOTO 185
154  IF I$="W" THEN MI%=MI%-1:IFMI%<0THENMI%=3:GOTO 185
156  IF I$=CHR$(13) THEN 189

158  IF TI-SM<10 THEN 150

185  ::VMC CA,C2,3,6,80
187  L%=L%+1:IFL%>9THENL%=6

189 LOOP UNTIL I$=CHR$(13)

190 ON MI%+1 GOTO 200,9000,9400,9200



#   GAME-STATE RESTARTS HERE

#   COLLECTED COINS
200 Q%=0
202 GS%(1)=GS%(0)

203 FAST:BANK1:FOR X=0TOMP%(0)/2*MP%(1)-1:M%(X)=PEEK(VE+X):NEXT:BANK15

#  EACH CREATURE HAS 3 HEALTH (INCLUDING PLAYER)
#  BUT PLAYER HAS RANGED ATTACK, ENEMIES ONLY HAVE MELEE ATTACK
205 FOR X=0TO4
210  PH%(X)=3
212  PF%(X)=0
214  PP%(X)=PS%(X)
219 NEXT

#   WRITE FACING DIRECTION
220 GOSUB 610

#   WRITE NR OF COINS LEFT TO COLLECT
225 GOSUB 602

#   WRITE PLAYER HITPOINTS
227 GOSUB 650

#   RENDER INITIAL VIEW
230 PF%(0)=0:GOSUB 340:TX=1:S2=TI

235 TX$="GO!!!":GOSUB 800

240 DO
241  REM SLOW
#242  I$=MID$(TD$,TX,1):TX=TX+1
242  GETKEY I$
243  I=ASC(I$)
244  FAST

#    RQ%: IF RENDER-QUEUE SHOULD BE USED FOR BACKWARDS RENDERING (FORWARD AND LOOK LEFT/RIGHT)
#    RD%: IF SCREEN NEEDS TO BE UPDATED
245  RQ%=0:RD%=-1:EN%=0

####################
# INPUT PROCESSING #
####################

#    LOOK LEFT/RIGHT
250  IF I$="Q" THEN RQ%=-1:TU%=-1:PF%(0)=PF%(0)-1:IF PF%(0)<0 THEN PF%(0)=3:GOTO300
255  IF I$="E" THEN RQ%=-1:TU%=-1:PF%(0)=PF%(0)+1:IF PF%(0)>3 THEN PF%(0)=0:GOTO300

#    MD%: MOVE-DIRECTION (NOT CONFUSED WITH LOOKING LEFT AND RIGHT)
#    MOVE FORWARD/BACKWARD
260  IF I$="W" THEN RQ%=-1:T=FNPP(0):MD%=0:GOTO 520
265  IF I$="S" THEN T=FNPP(1):MD%=2:GOTO 520

#    STRAFE LEFT/RIGHT
270  IF I$="A" THEN T=FNPG(0):MD%=3:GOTO 520
275  IF I$="D" THEN T=FNPG(2):MD%=1:GOTO 520

#    DISPLAY MAP
280  IF I$="M" THEN GOSUB 1000:GOTO320

#    FIGHT
285  IF I$="F" THEN GOSUB 1300:GOTO 300

#    EXIT
290  IF I$="X" THEN SLOW:GRAPHIC0:GOTO330


###################
# ENEMY REACTIONS #
###################

300  GOSUB 2000


#################
# RENDER OUTPUT #
#################

#    INPUT DONE AT THIS POINT. CALL RENDERING METHOD
310  IF RD% THEN GOSUB 340

#    TEXT UPDATE FLAG. CHECK IF TEXT ON TOP NEEDS UPDATING
312  IF TU% THEN GOSUB 610

#    HITPOINT UPDATE FLAG
314  IF HU% THEN BEGIN
315   ::RGW DEC("1A"),8
316   GOSUB 650
317   ::RGW DEC("1A"),DEC("FF")
318   TX$="YOU ARE HIT!":GOSUB 800
319  BEND

320 LOOP UNTIL Q%

325 GOTO 105

330 S2=TI-S2:PRINT "TOOK "S2 " JIFFIES":END

#1175 UNCOMPILED WITH INTEGERS
#1080 UNCOMPILED WITH REDUCED NR OF PARAMETERS
#1125 UNCOMPILED WITH AND1 FOR MOVEMENT CHECK
#1071 UNCOMPILED WITH GOTO300 FOR INPUT CHECK
#1024 UNCOMPILED WITH S REMOVED FROM RENDERING
#1021 REMOVED F% FROM TU RENDERING
#1274 JIFFIES AFTER A LOT OF NEW STUFF (INCLUDING RENDER-LIST FOR CORRECT MOTION)

#536 COMPILED WITH INTEGERS
#307 COMPILED WITH INTEGERS (VS 1274 FOR UNCOMPILED)

#1186

#################
# RENDERING
#################

340 C1=AP+400

#   TILE-RENDER ANALYSIS
342 ::VMF C1,0,7600

#   HERE-LEFT AND RIGHT
344 GX=2

#   IF MOTION WAS STRAFE-LEFT
346 IF I$="A" THEN RL=0:GOSUB 620:GOSUB 400:RL=1:GOSUB 620:GOTO 354

#   IF MOTION WAS STRAFE-RIGHT
348 IF I$="D" THEN RL=1:GOSUB 620:GOSUB 400:RL=0:GOSUB 620:GOTO 354

#   FORWARD/BACKWARD
350 RL=0:GOSUB 620:RL=1:GOSUB 620:GOSUB400



#   RENDER IN OPPOSITE ORDER? (ALWAYS, EXCEPT WALKING BACKWARDS)
352 IF RQ% THEN FORX=QX%-1TO0STEP-1:DV=RQ%(X):GOSUB630:NEXT:QX%=0


#   DISPLAY COINS TO COLLECT (IF THERE)
354 C1=CA+32*18

356 IF T%(4)=2 THEN BEGIN
357  C2=AP+80*80+40
358  ::VMC C1,C2,3,6,80
359 BEND

#360 IF T%(3)=2 OR T%(6)=2 THEN BEGIN
#361  C2=AP+80*80+20-484
#362  ::VMC C1,C2,3,6,80
#363 BEND

#365 IF T%(5)=2 OR T%(7)=2 THEN BEGIN
#366  C2=AP+80*80+60-480
#367  ::VMC C1,C2,3,6,80
#368 BEND


370 IF T%(10)=2 THEN BEGIN
371  C2=AP+80*64+40
372  ::VMC C1,C2,3,6,80
373 BEND

#375 IF T%(9)=2 OR T%(13)=2 THEN BEGIN
#376  C2=AP+80*64+30
#377  ::VMC C1,C2,3,6,80
#378 BEND

#380 IF T%(11)=2 OR T%(14)=2 THEN BEGIN
#381  C2=AP+80*64+50
#382  ::VMC C1,C2,3,6,80
#383 BEND



#   DISPLAY GHOSTS (IF THERE)

390 EN%=0
391 FOR X=1TO4
#    IF POSITION OF GHOST X IS IN FRONT OF PLAYER (EN%=PLAYER, FNPG(0)=FRONT OF PLAYER)
392  IF PP%(X)=FNMP(4) THEN Y=0:RD%=-1:GOSUB 850:GOTO 396
393  IF PP%(X)=FNMP(10) THEN Y=1:RD%=-1:GOSUB 850:GOTO 396
#394  IF PP%(X)=FNMP(3) THEN Y=0:Z=1:GOSUB 870:GOTO 396
#395  IF PP%(X)=FNMP(5) THEN Y=0:Z=0:GOSUB 870:GOTO 396

396 NEXT

398 FORX=0TO19:T%(X)=0:NEXT

399 RETURN


#   HERE-CENTER
400 GOTO 415
#400 EN%=0:FOR X=1TO4:IF PP%(X)=FNMP(4) THEN Y=0:GOSUB 850
#405 NEXT

415 T%(4)=FNM(4):IF T%(4)=1 THEN DV=3:ON 1+ABS(RQ%)GOSUB630,640:RETURN

420 IF I$="A" THEN RL=2:GOSUB620:GOSUB470:RL=3:GOSUB620:GOTO 435
425 IF I$="D" THEN RL=3:GOSUB620:GOSUB470:RL=2:GOSUB620:GOTO 435

430 RL=2:GOSUB620:RL=3:GOSUB620:GOSUB470:REM GOTO NEAR-CENTER
435 RETURN

#   NEAR-CENTER
470 GOTO 480
#470 FOR X=1TO4:IF PP%(X)=FNMP(10) THEN Y=1:GOSUB 850
#475 NEXT

480 T%(10)=FNM(10):IF T%(10)=1 THEN DV=9:ON 1+ABS(RQ%)GOSUB630,640:RETURN

485 GX=1:IF I$="A" THEN RL=4:GOSUB620:RL=5:GOSUB620:GOTO 500
490 RL=5:GOSUB620:RL=4:GOSUB620

#   FAR CENTER
500 T%(17)=FNM(17):IF T%(17)=1 THEN DV=16:ON 1+ABS(RQ%)GOSUB630,640

510 RETURN

######################
# MOVEMENT UPDATE
# INCLUDING TELEPORTERS, WALLS, ...
########################
#   CHECK IF BLOCKED BY WALL
520 V%=M%(T):IF (V% AND 1)=1 THEN 320

#   CHECK IF BLOCKED BY GHOST
526  X=1:DO:IF PP%(X)=TTHENEXIT
527  X=X+1:LOOPUNTILX>4

529 IF X<=4 THEN 320

530 PP%(0)=T

#   CHECK IF A COIN IS TO BE COLLECTED FROM HERE
540 IF V%=2 THEN GOSUB 600:GOTO 580

#   CHECK IF THIS IS A TELEPORT FIELD
550 IF V%=8 THEN PP%(0)=TL%(ABS(PP%(0)=TL%(0))):GOTO 580

#   CHECK IF EXIT
560 IF V%=40 THEN TX$="COLLECT ALL FOR EXIT":TD=1360:GOSUB800:GOTO580
570 IF V%=42 THEN GOSUB 1200

580 GOTO 300

#############################
#   UPDATE COINS LEFT TO COLLECT
#####
600 M%(PP%(0))=0:GS%(1)=GS%(1)-1
602 TX$=MID$(STR$(GS%(1))+" ",2)
603 FOR X=1 TO LEN(TX$)
604  C1=CA+FC%(FN TX(X))
605  C2=AP+15+3*(X-1)
606  ::VMC C1,C2,3,6,80
607 NEXT

608 IF GS%(1)<=0 THEN M%(EX%)=42:TX$="FIND THE EXIT!":TD=1360:GOSUB800

609 RETURN

#####################
# UPDATE COMPASS
####################


610 TU%=0
611 C1=CA+FD%(PF%(0)):C2=AP+3
612 ::VMC C1,C2,3,6,80
614 RETURN

#   CHECK VALUES TO RENDER
620 FOR G=0 TO GX
622  DV=RL%(RL,G):T%(DV)=FNM(DV):IF T%(DV)=1 THEN DV=DV-1:ON 1+ABS(RQ%)GOSUB630,640:GOTO 626
624 NEXT
626 RETURN

#   RENDER FRAME
630 C1=DA+DM%(DV,0):C2=AP+DM%(DV,4):C3=DM%(DV,1):C4=DM%(DV,2)
632 ::VMC C1,C2,C3,C4,80
634 RETURN

#   QUEUE FRAME FOR RENDERING
640 RQ%(QX%)=DV:QX%=QX%+1:RETURN


#   UPDATE PLAYER HITPOINTS
650 HU%=0
660 TX$="HP:"+STR$(PH%(0))+"   "
670 FOR X=1 TO LEN(TX$)
680  C1=CA+FN TX(X)*18
690  C2=AP+30+3*(X-1)
700  ::VMC C1,C2,3,6,80
710 NEXT

715 IF PH%(0)>0 THEN 790


719 TX$="YOU ARE DEAD!":GOSUB 800

#   IF PLAYER DEAD, DISPLAY LOSE MESSAGE
720 C1%=20*80+12:C2%=C1%-322:C3%=C2%:C4%=FNCL(4)
722 FOR X=0TO39
730  ::VMF C3%,C4%,60
732  C3%=C3%+80
735 NEXT

#   DISPLAY TEXT
740 TX$="YOU LOOSE!":TX%=(60-LEN(TX$)*3)/2

#   WRITE TEXT
744 C3%=C1%+1*6*80+TX%
745 FOR X=1TOLEN(TX$):F=FN TX(X)
750  C1=CA+FC%(F):C3%=C3%+3
755  ::VMC C1,C3%,3,6,80
760 NEXT

#   PRESS KEY
770 GOSUB 900

785 GETKEY I$

789 Q%=-1

790 RETURN


#   WRITE TEXT TO SCROLLING FIELD ON THE BOTTOM
#   FIRST, SCROLL EXISTING TEXT UP ONE LINE (IE 6 SCANLINES)
#   THE LINE APPEARING ON BOTTOM IS EMPTY

#   FIRST LINES APPEAR FROM TOP TO BOTTOM
#   SCROLLING STARTS WHEN LINE 5 IS REACHED
800 IF BT%<6 THEN 825

#   C1:SOURCE ADDRESS (LINE 1)
#   C2:TARGET ADDRESS (LINE 0)
802 C2=VR(4):C1=C2+80

#   THE VMC COMMANDS SCROLLS 36 SCANLINES UP FOR ONE SCANLINE
#     (SHOULD BE THE FULL BOTTOM TEXTAREA)
#   THE LOOP AROUND IT REPEATS 6 TIMES, SCROLLING EVERYTHING UP 6 SCANLINES (IE 1 LINE OF TEXT)
805 FOR X=0TO5
810  ::VMC C1,C2,80,36,80
815 NEXT
#820 BT%=BT%+1

#   FILL NEW LINE ON BOTTOM WITH NEW TEXT
825 C2=FNBT(BT%):IF BT%=6 THEN C2=C2-480
830 FOR X=1TOLEN(TX$):F=FN TX(X)
835  C1=CA+FC%(F):C2=C2+3
840  ::VMC C1,C2,3,6,80
845 NEXT
846 IF BT%<6 THEN BT%=BT%+1
849 RETURN

#   RENDER GHOST
#   GM%():GHOST-MEMORY ADDRESS (IN VRAM)
#   Y:DISTANCE (0=NEAR, 1=FAR)
#   GV%(PLAYER-FACING-DIRECTION,GHOST-FACING-DIRECTION)
#   0:VRAM-OFFSET OF SPRITE
850 GS%=GV%(PF%(0),PF%(1)):C1=GM%(Y,GS%,0)
855 C2=AP+GM%(Y,PF%(1),4):C3=GM%(Y,PF%(1),1):C4=GM%(Y,PF%(1),2)
860 ::VMC C1,C2,C3,C4,80
865 RETURN


#   RENDER HALF GHOST
#   FOR GHOST TO THE RIGHT, SOURCE IS FIRST HALF OF SPRITE.
#   SPRITE WIDTH IS HALF (2)
870 GS%=GV%(PF%(0),PF%(1))

#   HALF THE WIDTH ONLY
872 C3=GM%(Y,PF%(1),1):C5=C3/2:C4=GM%(Y,PF%(1),2)

#   FOR GHOST TO THE LEFT, SOURCE IS SECOND HALF OF SPRITE
874 C1=GM%(Y,GS%,0)+C3*Z
875 C2=AP+GM%(Y,PF%(1),4)
880 ::VMC C1,C2,C5,C4,80,C3
890 RETURN

#   WRITE "PRESS KEY" FOR WIN OR LOSE GAME
900 TX$="PRESS KEY":TX%=(60-LEN(TX$)*3)/2

910 C3%=C1%+3*6*80+TX%
920 FOR X=1TOLEN(TX$):F=FN TX(X)
930  C1=CA+FC%(F):C3%=C3%+3
940  ::VMC C1,C3%,3,6,80
950 NEXT

960 RETURN


# PRINT TEXT TO LOW-RES AREA (FOR MAIN MENU)
# TD CONTAINS THE LINE, TEXT IS AUTOMATICALLY CENTERED
# X-POS=80-LEN*3

970 C2=MI%(TD):C3=C2
975 FOR X=1 TO LEN(MI$(TD))
980  C1=CA+FC%(FN MI(X))
985  ::VMC C1,C3,3,6,80
990  C3=C3+3
995 NEXT
999 RETURN

###############
# DISPLAY LEVEL MAP
###############

1000 C1%=20*80+12:C2%=C1%-322:C3%=C2%

#    CREATE FRAME FOR MAP
1010 FOR X=0TO39
1020  C3%=C3%+80:C4%=FNCL(4)
1030  ::VMF C3%,C4%,60
1040 NEXT

#    DISPLAY MAP
1050 ::VMC MA,C1%,MP%(0),MP%(1),80

#    DISPLAY PLAYER POSITION
#    C2%=LINES OFFSET
#    C3%=COLS OFFSET
1100 C2%=PP%(0)/MP%(0)*2
1110 C3%=C2%*80
1115 C4%=PP%(0)-C2%*MP%(0)/2
1120 C1%=C1%+C3%+C4%+C4%
1125 CL%=0
1126 TZ=TI

1130 DO
1135  GET I$:IF LEN(I$)>0 THEN EXIT
1140  IF TI-TZ<30 THEN 1160
1143  CL%=ABS(CL%-1)
1145  C2%=FNCL(CL%*8)
1150  ::VMF C1%,C2%,2
1155  TZ=TI
1160 LOOP

1170 GOSUB340

1199 RETURN

################
# DISPLAY EXIT MESSAGE
################
1200 C1%=20*80+12:C2%=C1%-322:C3%=C2%

#    CREATE FRAME FOR MESSAGE
1210 FOR X=0TO39
1220  C3%=C3%+80:C4%=FNCL(4)
1230  ::VMF C3%,C4%,60
1240 NEXT

#    DISPLAY TEXT
1250 TX$="YOU WIN!":TX%=(60-LEN(TX$)*3)/2

#   WRITE TEXT
1255 C3%=C1%+1*6*80+TX%
1260 FOR X=1TOLEN(TX$):F=FN TX(X)
1265  C1=CA+FC%(F):C3%=C3%+3
1270  ::VMC C1,C3%,3,6,80
1275 NEXT

1279 GOSUB 900

1280 GETKEY I$

1290 Q%=-1

1299 RETURN

##################
# FIGHT AND COMBAT
##################
# FIGHT IS SIMPLE
# - PLAYER CAN ATTACK RANGED, AS SOON AS ENEMY IS VISIBLE
# - ENEMY MOVES ONE FIELD PER ACTION
# - ONCE ENEMY IS NEXT TO PLAYER, EACH ACTION HITS.
# - PLAYER ACTION ALWAYS COMES FIRST
# - PLAYER HAS 3 HEALTH
# - MONSTERS?

# CHECK WHICH MONSTER WE ARE FACING (TRACK MAP IN FACING DIRECTION) (EC%())
# REDUCE HIT POINTS OF MONSTER
# IF MONSTER IS STILL ALIVE, REDUCE HIT POINTS OF PLAYER
# IF PLAYER IS STILL ALIVE, BACK TO INPUT CHECK

# CX%:CHECK-INDEX OF TILES TO CHECK. TAKEN FROM EC%(). CAN BE 4,10,17
# EN%:ENEMY-ID
1300 EN%=0:CX%=0:X=1
1310 DO
1320  IF PP%(X)=FNMP(4) THEN EN%=X:CX%=1:GOTO 1330
1322  IF PP%(X)=FNMP(10) THEN EN%=X:CX%=2:GOTO 1330
1324  IF PP%(X)=FNMP(17) THEN EN%=X:CX%=3:GOTO 1330
1326  GOTO 1335

#1330  PRINT "ENEMY "EN%" "CX%" TILES AWAY AT "PP%(X):EXIT
1330  EXIT

#1335  PRINT "NOTHING TO ATTACK"
1335  X=X+1
1350 LOOP UNTIL X>4
1355 IF EN%=0 THEN RETURN

# CALCULATE ATTACK DAMAGE
1400 PH%(EN%)=PH%(EN%)-1
1405 TX$="GHOST DAMAGED 1 POINT":GOSUB 800
1410 IF PH%(EN%)>0 THEN RETURN

#    HANDLE ENEMY KNOCKOUT
1420 TX$="GHOST VANISHED":GOSUB 800
#1420 PRINT " ENEMY "EN%" GOES BACK TO SPAWN POINT "PS%(EN%)
#1421 PRINT "  ENEMY POS WAS "PP%(EN%)", PLAYER POS IS"PP%(0)
#    ENEMY LOCATION TO RESPAWN POINT
1439 PP%(EN%)=PS%(EN%):PF%(EN%)=0:PH%(EN%)=3

#    REDRAW VIEW
1440 RD%=-1

1999 RETURN


#########################################
# ENEMY MOVEMENT AND ATTACK CALCULATION #
#########################################

#    CALCULATE TARGET VECTOR
#    IF DIRECTION IS OK, MOVE FORWARD
#    IF NOT, CHANGE DIRECTION
#    PX%/PY%: PLAYER COORDINATES
#    FD%:FACING DIRECTION OF GHOST
#    SF%:SKIP FORWARD (WHEN MOVING FORWARD DOESN'T WORK)
2000 PX%=FNPX(PP%(0)):PY%=FNPY(PP%(0)):SF%=0
2005 EN%=1:PD%=9999:T=9999:BX%=-1
2010 FD%=PF%(EN%)
#2015 PRINT "EN:"EN%",FD:"FD%",POS:"PP%(EN%)",PLR:"PP%(0)

# TILE TO THE LEFT
2030 X=0:PP%=FNPG(X):GOSUB 2100

# TILE IN FRONT
2040 IF NOT SF% THEN X=1:PP%=FNPG(X):GOSUB 2100

# TILE TO THE RIGHT
2050 X=2:PP%=FNPG(X):GOSUB 2100

2051 REM PRINT " BEST: X:"BX%",DELTA:"PD%" TO "TL

#    CHECK IF MONSTER SHOULD MOVE FORWARD
2059 IF PD%(1)=PD% THEN BEGIN
2060  T=FNPP(0):V%=M%(T)
#2065  IF (V% AND 1)=1 THEN PRINT "  "EN%" CAN'T MOVE FORWARD ("V%").":SF%=-1:PD%(1)=9999:GOTO 2070
2065  IF (V% AND 1)=1 THEN SF%=-1:PD%(1)=9999:GOTO 2070

#2066  IF T=PP%(0) THEN PRINT "  "EN%" ATTACKS":PH%(0)=PH%(0)-1:HU%=-1:GOTO 2070
2066  IF T=PP%(0) THEN PH%(0)=PH%(0)-1:HU%=-1:GOTO 2070
#2066  IF T=PP%(0) THEN GOTO 2070

#2067  PP%(EN%)=T:PRINT "  "EN%" MOVES FORWARD TO "T:RD%=-1:GOTO2090
2067  PP%(EN%)=T:GOTO2090
2070 BEND:IF SF% THEN 2005

#2072 IF PD%(0)=PD% THEN PF%(EN%)=FNFD(3):PRINT "  "EN%" TURNS LEFT":GOTO 2090
#2073 IF PD%(2)=PD% THEN PF%(EN%)=FNFD(5):PRINT "  "EN%" TURNS RIGHT":GOTO 2090

2072 IF PD%(0)=PD% THEN PF%(EN%)=FNFD(3):GOTO 2090
2073 IF PD%(2)=PD% THEN PF%(EN%)=FNFD(5):GOTO 2090


2075 IF BX%=-1 THEN SLOW:PRINT"XXX BX%=-1":STOP

# IF X=1 THEN MOVE FORWARD
# IF X=0 THEN FACE LEFT
# IF X=2 THEN FACE RIGHT

# 

#2090 PRINT "POS "PP%(EN%)", F "PF%(EN%):RETURN
2090 RETURN


# DO DELTA CALCULATION
2100 GX%=FNPX(PP%):GY%=FNPY(PP%)
2110 T=FNPD(0):PD%(X)=T:IF T<PD% THEN PD%=T:TL=PP%:BX%=X
#2120 PRINT "  TILE:"PP%",DELTA:"T
2130 RETURN







################
# INSTRUCTIONS #
################

#111 MI%=0
#112 FOR TD=0TO3
#114  GOSUB 970
#116 NEXT


9000 ::VMF AP,0,VR(3)
9005 FOR TD = 4 TO 15
9010  C2=AP+(TD-3)*560:C3=C2
9020  GOSUB 975
9030 NEXT

9040 GETKEY I$
9199 GOTO 105


####################
# ACKNOWLEDGEMENTS #
####################
9200 REM ACKNOWLEDGEMENTS

9399 GOTO 105

############
# SETTINGS #
############

9400 REM SETTINGS

9599 GOTO 105



##############################################
# VRAM memory MAP
# 0-7999: double buffer 0 attribute ram
# 8000-15999: double buffer 1 attribute ram
# 16000-40000: "compressed" tiles AND FONT
# 
# 49535-65535: Screen RAM. statically configured for
#              - lowres in the 3d view
#              - maybe something else for text display regions

10000 REM GRAPHIC SETUP

10010 BANK 0

10020 DEF FN PA(ZZ)=7*ZZ+1
10021 DEF FN CL(ZZ)=ZZ*16+ZZ
10022 DEF FN MV(ZZ)=ZZ-48
10023 DEF FN MP(ZZ)=PP%(0)+V%(PF%(0),ZZ)

#     POSITION-DELTA: USED FOR ENEMIES TO CALCULATE NEW MOVEMENT VECTOR
#                     MANHATTAN DISTANCE
#                     PARAMETER: IGNORED, AS 4 ARE REQUIRED
#                                PX%/PY%: PLAYER COORDINATES
#                                GX%/GY%: GHOST COORDINATES
#                                THE COORDINATES ARE COORDINATED BY PX/PY FUNCTIONS (BELOW)
10024 DEF FN PD(ZZ)=ABS(PX%-GX%)+ABS(PY%-GY%)

#     GET X-COORDINATE FOR MANHATTAN-DISTANCE CALC
10025 DEF FN PX(ZZ)=INT(ZZ)-INT(INT(ZZ)/W%)*W%

#     GET Y-COORDINATE FOR MANHATTAN-DISTANCE CALC
10026 DEF FN PY(ZZ)=INT(ABS(ZZ/W%))

#     GET MAP-POSITION RELATIVE TO GHOST.
#         EN%=GHOST-ID, ZZ:0=FORWARD/RIGHT, 1=BACKWARD/LEFT
10027 DEF FN PG(ZZ)=PP%(EN%)+VD%(PF%(EN%)+PF%(EN%)+PF%(EN%)+PF%(EN%)+ZZ)

#     PEEK WORD-SIZED VALUE
10029 DEF FN PW(ZZ)=PEEK(ZZ)+PEEK(ZZ+1)*256

10030 DEF FN M(ZZ)=M%(PP%(0)+V%(PF%(0),ZZ))
10031 DEF FN FD(ZZ)=INT(PF%(EN%)+ZZ+4)-INT(INT(PF%(EN%)+ZZ+4)/INT(4))*INT(4)
10032 DEF FN PP(ZZ)=PP%(EN%)+P%(PF%(EN%)+PF%(EN%)+ZZ)
10033 DEF FN TX(ZZ)=ASC(MID$(TX$,ZZ,1))-32

#     CALCULATE BOTTOM-TEXT POSITION OF NEXT LINE TO PRINT
10034 DEF FN BT(ZZ)=VR(4)+ZZ*6*80

10035 DEF FN MI(ZZ)=ASC(MID$(MI$(TD),ZZ,1))-32

10039 DD=PEEK(186)
10040 BE=FNPW(4624)
10050 BLOAD"VDCBASIC2D.0AC6",B0,U(DD):SYSDEC("AC6")


10059 VR(0)=65535-160*120:VR(1)=9600:VR(2)=16000:VR(3)=8000:VR(4)=VR(0)+VR(2)+160:BT%=0
10060 AX=0:AP(0)=0:AP(1)=9600:AP=AP(AX)
10065 ::DISPVR(0)
10066 ::ATTR AP

10070 ::RGW 0,127
10071 ::RGW4,159
#     120 SCREEN-ROWS (2 SCANLINES PER ROW)
10072 ::RGW6,120
# RGW7,140
10073 ::RGW7,133

#     2 SCANLINES PER ROW
10074 ::RGW9,1

10080 ::RGO 25,128:REM BITMAP MODE ON
10090 ::RGO 28,24:REM 64K VRAM
10100 ::RGW 36,0
10110 ::RGW DEC("1A"),DEC("FF")


############################
# SCREEN SETUP
############################
#     16K SCREEN-RAM IS FILLED WITH BG-COLOR LEFT, FG-COLOR RIGHT (TOP 100 SCANLINES)
#      3,2K SCREEN-RAM IS FILLED WITH 0 (BOTTOM 20 SCANLINES)
10120 ::VMF VR(0),15,VR(2)
10124 C1=VR(0)+16000
10125 ::VMF C1,0,3200

#     8000 BYTES ATTRIBUTE RAM ARE FILLED WITH ZERO (LOWRES EMPTY)
#     1600 BYTES ATTRIBUTE RAM ARE SET TO FG/BG COLOR
10130 ::VMF AP,0,VR(3):REM CLEAR ATTRIBUTE RAM
10134 C1=AP+8000
10135 ::VMF C1,DEC("1F"),1600
10140 DA=AP+VR(2)


############################
# LOAD RESOURCES INTO VRAM
############################
10150 FI$="WALLS.VDC"
10160 ?"LOADING "FI$"...";:BLOAD (FI$),B0,P(BE)
10170 FL=FNPW(174)-BE:PRINT FL" BYTES DONE"

10180 DC=PEEK(BE):PRINT DC " ENTRIES"
10185 DIM DM%(DC-1,4)
10190 D=FNPA(DC)
10200 FL=FL-D

#10210 FAST

#33293 -> 10218 ILLEGAL QUANTITY ERROR:FIXED BY INTRODUCING C1 BELOW

#33305 ->       ILLEGAL QUANTITY ERROR
#33622 -> 

#     COPY WALLSET FROM RAM TO VRAM
10215 CA=DA+FL
10216 C1=BE+D
#10219 PRINT "COPYING WALLSET TO VRAM ADDRESS "DA" TO "CA
10220 ::RTV C1,DA,FL

#     WRITE WALLSET-METADATA TO ARRAY
#     0,1:OFFSET OF SOURCE IN VRAM
#       2:WIDTH IN BYTES (1 BYTE = 2 PIXELS)
#       3:HEIGHT IN SCANLINES
#       4:SIZE OF TILE (LENGTH IN BYTES)
#     5,6:POSITION OF TILE ON SCREEN
10230 FOR FI=0 TO DC-1
10240  PA=BE+FNPA(FI)
10250  DM%(FI,0)=FNPW(PA)
10260  DM%(FI,1)=PEEK(PA+2)
10270  DM%(FI,2)=PEEK(PA+3)
10280  DM%(FI,3)=FNPW(PA+4)
10290  DM%(FI,4)=PEEK(PA+6)+406
10310 NEXT

10311 PRINT"LOADING FONT...";:BLOAD"FONT2.VDC",U(DD),B0,P(BE)
10312 FL=FNPW(174)-BE:PRINT FL" BYTES DONE":MA=CA+FL
10313 PRINT "COPYING FONTS TO VRAM ADDRESS "CA
10314 ::RTV BE,CA,FL

10320 PRINT "MAP ADDRESS IN VRAM STARTING AT "MA

10329 GA(0)=9600
10330 PRINT"LOADING RED...";:BLOAD"RED.VDC",U(DD),B0,P(BE)
10332 FL=FNPW(174)-BE:PRINT FL" BYTES DONE"::GA(1)=GA(0)+FL
10333 PRINT "COPYING RED TO VRAM ADDRESS "GA(0)
# 29 IS THE OFFSET TO THE ACTUAL PIXEL DATA
10334 ::RTV BE+29,GA(0),FL

10340 FOR X=0 TO 3
10342  PA=BE+FNPA(X)
10344  GM%(0,X,0)=GA(0)+FNPW(PA)
10346  GM%(0,X,1)=PEEK(PA+2)
10348  GM%(0,X,2)=PEEK(PA+3)
10350  GM%(0,X,3)=FNPW(PA+4)
10352  GM%(0,X,4)=36+80*53
10354 NEXT

10360 PRINT"LOADING RED1...";:BLOAD"RED1.VDC",U(DD),B0,P(BE)
10362 FL=FNPW(174)-BE:PRINT FL" BYTES DONE"::GA(2)=GA(1)+FL
10363 PRINT "COPYING RED1 TO VRAM ADDRESS "GA(1)
# 29 IS THE OFFSET TO THE ACTUAL PIXEL DATA
10364 ::RTV BE+29,GA(1),FL

10370 FOR X=0 TO 3
10372  PA=BE+FNPA(X)
10374  GM%(1,X,0)=GA(1)+FNPW(PA)
10376  GM%(1,X,1)=PEEK(PA+2)
10378  GM%(1,X,2)=PEEK(PA+3)
10380  GM%(1,X,3)=FNPW(PA+4)
10382  GM%(1,X,4)=31+80*44
10384 NEXT



10390 PRINT "SCREEN-RAM STARTING AT"VR(0)




# CALCULATE TEXT-CHARACTER OFFSET POSITIONS
10400 FOR X=0TO95:FC%(X)=X*18:NEXT


# TD: TEXT-DELTA (OFFSET IN PIXELS TO TEXT-START)
10410 TX$="GREETINGS, CRAWLER!":GOSUB 800


# MAIN MENU TEXT
10500 MI$(0)="PLAY!":MI$(1)="INSTRUCTIONS"
10501 MI$(2)="SETTINGS":MI$(3)="ACKNOWLEDGEMENTS"

# INSTRUCTIONS TEXT (26 CHARS MAX PER LINE, 16 LINES MAX)
#             XXXXXXXXXXXXXXXXXXXXXXXXXX
10510 MI$(4)="COLLECT ALL THE GEMS"
10511 MI$(5)="DON'T GET KILLED BY THE
10512 MI$(6)="GHOST. PRESS F TO ATTACK."
10513 MI$(7)="ATTACKRANGE IS 3 TILES"
10514 MI$(8)="THE GHOST CAN ONLY ATTACK
10515 MI$(9)="ADJACENT TILES."
10516 MI$(10)="HE MOVES AS FAST AS YOU,"
10517 MI$(11)="BUT CAN'T STRAFE."
10518 MI$(12)="ONCE YOU HAVE ALL GEMS
10519 MI$(13)="GO TO THE EXIT."
10520 MI$(14)="KEYS WASDQE TO MOVE"
10521 MI$(15)="M DISPLAYS THE MAP"


10980 BANK 15
10990 RETURN

# MAP DATA
# ODD NUMBERS ARE NOT-WALKABLE
# 1 - REGULAR WALL
# 3 - WALL OF MONSTER DEN
# 5 - DOOR OF MONSTER DEN
#  IT'S ABOUT THE LOWEST BIT OF THE ASCII CODE, NOT THE HEX-REP. SO, A IS ODD (65)

# EVEN NUMBERS ARE
# 0 - EMPTY
# 2 - COIN
# 4 - POWER COIN
# 6 - SPAWN POINT
# 8 - TELEPORT TO A
# SAME AS ABOVE.B IS NOT HEX-B BUT SOME EVEN ASCII CODE
# B - TELEPORT TO 8
# D - SPAWNPOINT OF GHOST 1 (20)
# F - SPAWNPOINT OF GHOST 2 (22)
# H - SPAWNPOINT OF GHOST 3 (24)
# J - SPAWNPOINT OF GHOST 4 (26)
# X - DISABLED EXIT (VALUE IS 40)
# Z - ENABLED EXIT (VALUE IS 42)


#60000 DATA 1,1,1,1,1,1,1,1
#60001 DATA 1,0,0,0,0,2,2,1
#60002 DATA 1,2,1,0,X,1,2,1
#60003 DATA 1,2,1,0,1,0,2,1
#60004 DATA 1,6,0,B,0,0,2,1
#60005 DATA 1,0,1,0,1,0,2,1
#60006 DATA 1,2,2,2,2,2,2,1
#60007 DATA 1,1,1,1,1,1,1,1


60000 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
60001 DATA 1,X,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,1
60002 DATA 1,2,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1
60003 DATA 1,2,1,2,2,2,2,2,B,0,0,0,2,2,2,2,2,1,4,1
60004 DATA 1,2,1,2,1,1,2,1,1,1,1,1,1,2,1,1,2,1,2,1
60005 DATA 1,2,2,2,2,2,2,1,1,1,1,1,1,2,2,2,2,2,2,1
60006 DATA 1,2,1,2,1,1,2,1,1,1,1,1,1,2,1,1,2,1,2,1
60007 DATA 1,4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1
60008 DATA 1,2,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1
60009 DATA 1,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,6,1
60010 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1

#60100 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
#60101 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1
#60102 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60103 DATA 1,4,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,4,1
#60104 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60105 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1
#60106 DATA 1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1
#60107 DATA 1,2,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1
#60108 DATA 1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1
#60109 DATA 1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1
#60110 DATA 1,1,1,1,1,1,2,1,1,1,1,1,0,1,1,0,1,1,1,1,1,2,1,1,1,1,1,1
#60111 DATA 1,1,1,1,1,1,2,1,1,0,0,0,0,6,0,0,0,0,0,1,1,2,1,1,1,1,1,1
#60112 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,0,0,1,1,1,0,1,1,2,1,1,1,1,1,1
#60113 DATA 1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1
#60114 DATA 0,0,8,0,0,0,2,0,0,0,1,0,7,9,A,C,0,1,0,0,0,2,0,0,0,8,0,0
#60115 DATA 1,1,1,1,1,1,2,1,1,0,1,0,0,0,0,0,0,1,0,1,1,2,1,1,1,1,1,1
#60116 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60117 DATA 1,1,1,1,1,1,2,1,1,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,1,1,1,1
#60118 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60119 DATA 1,1,1,1,1,1,2,1,1,0,1,1,1,1,1,1,1,1,0,1,1,2,1,1,1,1,1,1
#60120 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1
#60121 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60122 DATA 1,2,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,2,1
#60123 DATA 1,4,2,2,1,1,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,1,1,2,2,4,1
#60124 DATA 1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1
#60125 DATA 1,1,1,2,1,1,2,1,1,2,1,1,1,1,1,1,1,1,2,1,1,2,1,1,2,1,1,1
#60126 DATA 1,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1
#60127 DATA 1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1
#60128 DATA 1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1
#60129 DATA 1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1
#60130 DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1


#62069 W%=20


62070 DATA -20,20,1,-1,20,-20,-1,1
#62070 DATA -28,28,1,-1,28,-28,-1,1 
#62070 DATA -8,8,1,-1,8,-8,-1,1

# LEFT,FRONT,RIGHT WHEN FACING NORTH,EAST,SOUTH,WEST (VD%())
#62075 DATA -1,-8,1,8, -8,1,8,-1, 1,8,-1,-8, 8,-1,-8,1
62075 DATA -1,-20,1,20, -20,1,20,-1, 1,20,-1,-20, 20,-1,-20,1


#RL%()
62080 DATA 1,3,8, 2,5,12, 6,9,15, 7,11,19, 13,16,0, 14,18,0

#GV%()
62090 DATA 2,1,0,3, 3,2,1,0, 0,3,2,1, 1,0,3,2

